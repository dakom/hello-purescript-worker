{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///(webpack)/buildin/amd-options.js","webpack:///./src/app/io/utils/Utils.ts","webpack:///./node_modules/sanctuary-type-classes/index.js","webpack:///./node_modules/sanctuary-type-classes/node_modules/sanctuary-type-identifiers/index.js","webpack:///./node_modules/sanctuary-type-identifiers/index.js","webpack:///./src/app/io/types/Worker-Types.ts","webpack:///./src/app/IO.ts","webpack:///./src/app/Worker.ts","webpack:///./src/app/io/utils/flags/Flags.ts","webpack:///./src/app/io/utils/worker/Worker-Loader.ts","webpack:///./node_modules/fluture/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/inspect-f/index.js","webpack:///./node_modules/denque/index.js","webpack:///./node_modules/concurrify/index.js","webpack:///./src/app/io/utils/datatypes/Maybe.ts","webpack:///./src/app/io/renderer/Renderer.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","default","object","property","prototype","hasOwnProperty","p","s","__webpack_amd_options__","__export","e","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","f","u","apply","self","sanctuaryTypeClasses","sanctuaryTypeIdentifiers","type","__doctest","require","List","Maybe","Nil","Cons","Nothing","Just","concat_","xs","ys","concat","constant","x","y","forEachKey","strMap","keys","forEach","has","k","identity","pair","sameType","iterationNext","done","iterationDone","TypeClass","url","dependencies","test","this","every","Constructor","Value","_funcPath","allowInheritedProps","path","_x","idx","length","funcPath","implPath","implementations","functionName","match","exec","$","_name","requirements","getBoundMethod","typeRep","constructor","typeClass","arg","methods","reduce","Setoid","equals","Ord","lte","Semigroupoid","compose","Category","id","Semigroup","Monoid","empty","Group","invert","Filterable","filter","Functor","map","Bifunctor","bimap","Profunctor","promap","Apply","ap","Applicative","of","Chain","chain","ChainRec","chainRec","Monad","Alt","alt","Plus","zero","Alternative","Foldable","Traversable","traverse","Extend","extend","Comonad","extract","Contravariant","contramap","Array$of","Array$prototype$equals","other","Array$prototype$lte","Array$prototype$concat","Object$prototype$concat","result","assign","Null","toString","fantasy-land/equals","fantasy-land/lte","Undefined","Boolean","valueOf","Number","isNaN","Date","NaN","toISOString","RegExp","source","global","ignoreCase","multiline","sticky","unicode","String","fantasy-land/empty","JSON","stringify","fantasy-land/concat","Array","fantasy-land/of","fantasy-land/chainRec","nil","todo","head","tail","more","steps","step","push","fantasy-land/zero","reprs","sort","join","fantasy-land/filter","pred","fantasy-land/map","fantasy-land/ap","fs","idx2","fantasy-land/chain","fantasy-land/alt","fantasy-land/reduce","initial","acc","fantasy-land/traverse","go","lift2","Math","floor","fantasy-land/extend","_","slice","Arguments","Error","message","theseKeys","otherKeys","shift","z","applicative","v","singleton","Function","fantasy-land/id","a","fantasy-land/compose","semigroupoid","functor","fantasy-land/promap","g","profunctor","fantasy-land/contramap","contravariant","$seen","method","pop","indexOf","xType","err","$pairs","some","lt","filterable","bifunctor","applyF","applyX","chain_","foldable","sortBy","rs","fx","lte_","b","isArray","F","traversable","extend_","gt","gte","min","max","group","reject","flip","mapLeft","lift3","apFirst","apSecond","append","prepend","size","elem","foldMap","monoid","reverse","takeWhile","take","dropWhile","sequence","duplicate","comonad","$$type","pattern","parse","groups","namespace","version","MESSAGE","WorkerLoaderCommand","INIT","READY","WorkerCommand","TICK","RENDER","MyWorker","Utils_1","Worker_Types_1","Renderer_1","_a","getCompileFlags","buildVersion","buildMode","isProduction","console","log","worker","loadWorker","fork","error","readyForUpdate","addEventListener","data","cmd","render","state","tick","frameTs","postMessage","requestAnimationFrame","Worker","fluture_1","Future","resolve","onInitial","removeEventListener","initWorker","factory","Z","inspectf","Denque","concurrify","scope","window","setImmediate","setTimeout","noop","moop","show","showf","sf","replace","partial1","arguments","partial2","partial3","immediately","FL","ordinal","typeError","TypeError","invalidArgument","it","at","expected","actual","invalidContext","invalidFuture","info","isFunction","isThenable","Promise","then","isUnsigned","Infinity","isObject","isEmpty","throwRejection","computation","Computation","isFuture","_ap","mapper","_map","lmapper","rmapper","_bimap","_chain","mapRej","_mapRej","chainRej","_chainRej","race","_race","both","_both","and","_and","or","_or","swap","_swap","fold","_fold","finally","_finally","lastly","rej","res","_fork","callback","promise","_this","isRejected","isResolved","isSettled","extractLeft","extractRight","Core","_computation","Rejected","_value","Resolved","Never","_isNever","Sequence","open","cancel","left","right","never","isNever","Eager","future","rejected","resolved","Action","run","ApAction","MapAction","BimapAction","ChainAction","MapRejAction","ChainRejAction","SwapAction","FoldAction","FinallyAction","AndAction","OrAction","RaceAction","BothAction","RaceActionState","early","BothActionState","spawn","actions","_spawn","_actions","Next","Done","_transform","action","settled","cold","queue","async","settle","unshift","warmupActions","terminator","clear","str","Undetermined","Synchronous","Asynchronous","init","_step","_init","ap$mval","mval","mfunc","alt$left","map$mapper","bimap$lmapper$rmapper","bimap$lmapper","chain$chainer","chainer","mapRej$mapper","chainRej$chainer","lastly$right","and$left","both$left","or$left","race$right","fold$f$g","fold$f","done$callback","fork$f$g","fork$f","value$cont","cont","ParallelAp","_mval","_mfunc","After$race","_time","After","time","RejectAfter","after$time","rejectAfter$time","reason","Attempt","fn","_fn","attempt","timing","drain","func","val","c1","c2","okval","okfunc","ParallelAp$rej","clearTimeout","Cold","Cached","Pending","Rejected$1","Resolved$1","pure","_pure","reset","Encase","Encase2","_b","Encase3","_c","EncaseN","EncaseN2","EncaseN$1","EncaseP","EncaseP2","EncaseP3","check$iteration","Go","generator","_generator","Hook","acquire","dispose","consume","_acquire","_dispose","_consume","hook$acquire$cleanup","cleanup","hook$acquire","Node","check$parallel","Parallel","futures","_futures","_length","_max","_state","_addToQueue","_queue","_queued","_drainQueue","_cancel","iterator","next","check$iterator","cancelAcquire","resource","cancelConsume","Hook$done","Hook$dispose","disposal","Hook$cancelConsuption","Hook$consumptionRejected","Hook$consumptionResolved","consumption","cancels","out","cursor","running","blocked","Parallel$cancel","Parallel$run","Parallel$drain","emptyArray","parallel$max","TryP","Par","isParallel","Fluture","freeze","seq","par","sequential","after","rejectAfter","try","cache","encase","encase2","encase3","encaseN","encaseN2","encaseN3","encaseP","encaseP2","encaseP3","do","hook","node","parallel","tryP","eval","RSPACE","RCODE","RTABS","REOL","isCode","line","getPadding","pad","fixIndentation","lines","indentation","paddings","depth","tabsize","find","RPAD","shown","split","array","_head","_tail","_capacityMask","_list","_fromArray","peekAt","index","len","peek","peekFront","peekBack","item","_growArray","_shrinkArray","removeOne","remove","count","removed","del_count","toArray","splice","temp","arg_len","arguments_index","leng","_copyArray","fullCopy","newArray","list","isBinary","an","Repr","INNERTYPE","OUTERTYPE","identifier","INNERNAME","OUTERNAME","Concurrently","isInner","isOuter","construct","proto","mzero","maybe","nothingFn","justFn","value0","getMaybeValue","div","document","getElementById","innerHTML","startTime","elapsedTime","deltaTime"],"mappings":"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","file":"io.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","export * from \"./flags/Flags\";\r\nexport * from \"./worker/Worker-Loader\";\r\nexport * from \"./datatypes/Maybe\";\r\n","/*\n             ############                  #\n            ############                  ###\n                  #####                  #####\n                #####      ####################\n              #####       ######################\n            #####                     ###########\n          #####         ######################\n        #####          ####################\n      #####                        #####\n     ############                 ###\n    ############                 */\n\n//. # sanctuary-type-classes\n//.\n//. The [Fantasy Land Specification][FL] \"specifies interoperability of common\n//. algebraic structures\" by defining a number of type classes. For each type\n//. class, it states laws which every member of a type must obey in order for\n//. the type to be a member of the type class. In order for the Maybe type to\n//. be considered a [Functor][], for example, every `Maybe a` value must have\n//. a `fantasy-land/map` method which obeys the identity and composition laws.\n//.\n//. This project provides:\n//.\n//.   - [`TypeClass`](#TypeClass), a function for defining type classes;\n//.   - one `TypeClass` value for each Fantasy Land type class;\n//.   - lawful Fantasy Land methods for JavaScript's built-in types;\n//.   - one function for each Fantasy Land method; and\n//.   - several functions derived from these functions.\n//.\n//. ## Type-class hierarchy\n//.\n/* eslint-disable max-len */\n//. <pre>\n//.  Setoid   Semigroupoid  Semigroup   Foldable        Functor      Contravariant  Filterable\n//. (equals)    (compose)    (concat)   (reduce)         (map)        (contramap)    (filter)\n//.     |           |           |           \\         / | | | | \\\n//.     |           |           |            \\       /  | | | |  \\\n//.     |           |           |             \\     /   | | | |   \\\n//.     |           |           |              \\   /    | | | |    \\\n//.     |           |           |               \\ /     | | | |     \\\n//.    Ord      Category     Monoid         Traversable | | | |      \\\n//.   (lte)       (id)       (empty)        (traverse)  / | | \\       \\\n//.                             |                      /  | |  \\       \\\n//.                             |                     /   / \\   \\       \\\n//.                             |             Profunctor /   \\ Bifunctor \\\n//.                             |              (promap) /     \\ (bimap)   \\\n//.                             |                      /       \\           \\\n//.                           Group                   /         \\           \\\n//.                          (invert)               Alt        Apply      Extend\n//.                                                (alt)        (ap)     (extend)\n//.                                                 /           / \\           \\\n//.                                                /           /   \\           \\\n//.                                               /           /     \\           \\\n//.                                              /           /       \\           \\\n//.                                             /           /         \\           \\\n//.                                           Plus    Applicative    Chain      Comonad\n//.                                          (zero)       (of)      (chain)    (extract)\n//.                                             \\         / \\         / \\\n//.                                              \\       /   \\       /   \\\n//.                                               \\     /     \\     /     \\\n//.                                                \\   /       \\   /       \\\n//.                                                 \\ /         \\ /         \\\n//.                                             Alternative    Monad     ChainRec\n//.                                                                     (chainRec)\n//. </pre>\n/* eslint-enable max-len */\n//.\n//. ## API\n\n(function(f) {\n\n  'use strict';\n\n  /* istanbul ignore else */\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f(require('sanctuary-type-identifiers'));\n  } else if (typeof define === 'function' && define.amd != null) {\n    define(['sanctuary-type-identifiers'], f);\n  } else {\n    self.sanctuaryTypeClasses = f(self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(type) {\n\n  'use strict';\n\n  /* istanbul ignore if */\n  if (typeof __doctest !== 'undefined') {\n    /* global __doctest:false */\n    /* eslint-disable no-unused-vars */\n    var Identity = __doctest.require('./test/Identity');\n    var List = __doctest.require('./test/List');\n    var Maybe = __doctest.require('./test/Maybe');\n    var Sum = __doctest.require('./test/Sum');\n    var Tuple = __doctest.require('./test/Tuple');\n\n    var Nil = List.Nil, Cons = List.Cons;\n    var Nothing = Maybe.Nothing, Just = Maybe.Just;\n    /* eslint-enable no-unused-vars */\n  }\n\n  //  concat_ :: Array a -> Array a -> Array a\n  function concat_(xs) {\n    return function(ys) {\n      return xs.concat(ys);\n    };\n  }\n\n  //  constant :: a -> b -> a\n  function constant(x) {\n    return function(y) {\n      return x;\n    };\n  }\n\n  //  forEachKey :: (StrMap a, StrMap a ~> String -> Undefined) -> Undefined\n  function forEachKey(strMap, f) {\n    Object.keys(strMap).forEach(f, strMap);\n  }\n\n  //  has :: (String, Object) -> Boolean\n  function has(k, o) {\n    return Object.prototype.hasOwnProperty.call(o, k);\n  }\n\n  //  identity :: a -> a\n  function identity(x) { return x; }\n\n  //  pair :: a -> b -> Array2 a b\n  function pair(x) {\n    return function(y) {\n      return [x, y];\n    };\n  }\n\n  //  sameType :: (a, b) -> Boolean\n  function sameType(x, y) {\n    return typeof x === typeof y && type(x) === type(y);\n  }\n\n  //  thrush :: a -> (a -> b) -> b\n  function thrush(x) {\n    return function(f) {\n      return f(x);\n    };\n  }\n\n  //  type Iteration a = { value :: a, done :: Boolean }\n\n  //  iterationNext :: a -> Iteration a\n  function iterationNext(x) { return {value: x, done: false}; }\n\n  //  iterationDone :: a -> Iteration a\n  function iterationDone(x) { return {value: x, done: true}; }\n\n  //# TypeClass :: (String, String, Array TypeClass, a -> Boolean) -> TypeClass\n  //.\n  //. The arguments are:\n  //.\n  //.   - the name of the type class, prefixed by its npm package name;\n  //.   - the documentation URL of the type class;\n  //.   - an array of dependencies; and\n  //.   - a predicate which accepts any JavaScript value and returns `true`\n  //.     if the value satisfies the requirements of the type class; `false`\n  //.     otherwise.\n  //.\n  //. Example:\n  //.\n  //. ```javascript\n  //. //    hasMethod :: String -> a -> Boolean\n  //. const hasMethod = name => x => x != null && typeof x[name] == 'function';\n  //.\n  //. //    Foo :: TypeClass\n  //. const Foo = Z.TypeClass(\n  //.   'my-package/Foo',\n  //.   'http://example.com/my-package#Foo',\n  //.   [],\n  //.   hasMethod('foo')\n  //. );\n  //.\n  //. //    Bar :: TypeClass\n  //. const Bar = Z.TypeClass(\n  //.   'my-package/Bar',\n  //.   'http://example.com/my-package#Bar',\n  //.   [Foo],\n  //.   hasMethod('bar')\n  //. );\n  //. ```\n  //.\n  //. Types whose values have a `foo` method are members of the Foo type class.\n  //. Members of the Foo type class whose values have a `bar` method are also\n  //. members of the Bar type class.\n  //.\n  //. Each `TypeClass` value has a `test` field: a function which accepts\n  //. any JavaScript value and returns `true` if the value satisfies the\n  //. type class's predicate and the predicates of all the type class's\n  //. dependencies; `false` otherwise.\n  //.\n  //. `TypeClass` values may be used with [sanctuary-def][type-classes]\n  //. to define parametrically polymorphic functions which verify their\n  //. type-class constraints at run time.\n  function TypeClass(name, url, dependencies, test) {\n    if (!(this instanceof TypeClass)) {\n      return new TypeClass(name, url, dependencies, test);\n    }\n    this.name = name;\n    this.url = url;\n    this.test = function(x) {\n      return dependencies.every(function(d) { return d.test(x); }) && test(x);\n    };\n  }\n\n  TypeClass['@@type'] = 'sanctuary-type-classes/TypeClass';\n\n  //  data Location = Constructor | Value\n\n  //  Constructor :: Location\n  var Constructor = 'Constructor';\n\n  //  Value :: Location\n  var Value = 'Value';\n\n  //  _funcPath :: (Boolean, Array String, a) -> Nullable Function\n  function _funcPath(allowInheritedProps, path, _x) {\n    var x = _x;\n    for (var idx = 0; idx < path.length; idx += 1) {\n      var k = path[idx];\n      if (x == null || !(allowInheritedProps || has(k, x))) return null;\n      x = x[k];\n    }\n    return typeof x === 'function' ? x : null;\n  }\n\n  //  funcPath :: (Array String, a) -> Nullable Function\n  function funcPath(path, x) {\n    return _funcPath(true, path, x);\n  }\n\n  //  implPath :: Array String -> Nullable Function\n  function implPath(path) {\n    return _funcPath(false, path, implementations);\n  }\n\n  //  functionName :: Function -> String\n  var functionName = has('name', function f() {}) ?\n    function functionName(f) { return f.name; } :\n    /* istanbul ignore next */\n    function functionName(f) {\n      var match = /function (\\w*)/.exec(f);\n      return match == null ? '' : match[1];\n    };\n\n  //  $ :: (String, Array TypeClass, StrMap (Array Location)) -> TypeClass\n  function $(_name, dependencies, requirements) {\n    function getBoundMethod(_name) {\n      var name = 'fantasy-land/' + _name;\n      return requirements[_name] === Constructor ?\n        function(typeRep) {\n          var f = funcPath([name], typeRep);\n          return f == null && typeof typeRep === 'function' ?\n            implPath([functionName(typeRep), name]) :\n            f;\n        } :\n        function(x) {\n          var isPrototype = x != null &&\n                            x.constructor != null &&\n                            x.constructor.prototype === x;\n          var m = null;\n          if (!isPrototype) m = funcPath([name], x);\n          if (m == null)    m = implPath([type(x), 'prototype', name]);\n          return m && m.bind(x);\n        };\n    }\n\n    var version = '8.2.1';  // updated programmatically\n    var keys = Object.keys(requirements);\n\n    var typeClass = TypeClass(\n      'sanctuary-type-classes/' + _name,\n      'https://github.com/sanctuary-js/sanctuary-type-classes/tree/v' + version\n        + '#' + _name,\n      dependencies,\n      function(x) {\n        return keys.every(function(_name) {\n          var arg = requirements[_name] === Constructor ? x.constructor : x;\n          return getBoundMethod(_name)(arg) != null;\n        });\n      }\n    );\n\n    typeClass.methods = keys.reduce(function(methods, _name) {\n      methods[_name] = getBoundMethod(_name);\n      return methods;\n    }, {});\n\n    return typeClass;\n  }\n\n  //# Setoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Setoid][].\n  //.\n  //. ```javascript\n  //. > Setoid.test(null)\n  //. true\n  //. ```\n  var Setoid = $('Setoid', [], {equals: Value});\n\n  //# Ord :: TypeClass\n  //.\n  //. `TypeClass` value for [Ord][].\n  //.\n  //. ```javascript\n  //. > Ord.test(0)\n  //. true\n  //.\n  //. > Ord.test(Math.sqrt)\n  //. false\n  //. ```\n  var Ord = $('Ord', [Setoid], {lte: Value});\n\n  //# Semigroupoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroupoid][].\n  //.\n  //. ```javascript\n  //. > Semigroupoid.test(Math.sqrt)\n  //. true\n  //.\n  //. > Semigroupoid.test(0)\n  //. false\n  //. ```\n  var Semigroupoid = $('Semigroupoid', [], {compose: Value});\n\n  //# Category :: TypeClass\n  //.\n  //. `TypeClass` value for [Category][].\n  //.\n  //. ```javascript\n  //. > Category.test(Math.sqrt)\n  //. true\n  //.\n  //. > Category.test(0)\n  //. false\n  //. ```\n  var Category = $('Category', [Semigroupoid], {id: Constructor});\n\n  //# Semigroup :: TypeClass\n  //.\n  //. `TypeClass` value for [Semigroup][].\n  //.\n  //. ```javascript\n  //. > Semigroup.test('')\n  //. true\n  //.\n  //. > Semigroup.test(0)\n  //. false\n  //. ```\n  var Semigroup = $('Semigroup', [], {concat: Value});\n\n  //# Monoid :: TypeClass\n  //.\n  //. `TypeClass` value for [Monoid][].\n  //.\n  //. ```javascript\n  //. > Monoid.test('')\n  //. true\n  //.\n  //. > Monoid.test(0)\n  //. false\n  //. ```\n  var Monoid = $('Monoid', [Semigroup], {empty: Constructor});\n\n  //# Group :: TypeClass\n  //.\n  //. `TypeClass` value for [Group][].\n  //.\n  //. ```javascript\n  //. > Group.test(Sum(0))\n  //. true\n  //.\n  //. > Group.test('')\n  //. false\n  //. ```\n  var Group = $('Group', [Monoid], {invert: Value});\n\n  //# Filterable :: TypeClass\n  //.\n  //. `TypeClass` value for [Filterable][].\n  //.\n  //. ```javascript\n  //. > Filterable.test({})\n  //. true\n  //.\n  //. > Filterable.test('')\n  //. false\n  //. ```\n  var Filterable = $('Filterable', [], {filter: Value});\n\n  //# Functor :: TypeClass\n  //.\n  //. `TypeClass` value for [Functor][].\n  //.\n  //. ```javascript\n  //. > Functor.test([])\n  //. true\n  //.\n  //. > Functor.test('')\n  //. false\n  //. ```\n  var Functor = $('Functor', [], {map: Value});\n\n  //# Bifunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Bifunctor][].\n  //.\n  //. ```javascript\n  //. > Bifunctor.test(Tuple('foo', 64))\n  //. true\n  //.\n  //. > Bifunctor.test([])\n  //. false\n  //. ```\n  var Bifunctor = $('Bifunctor', [Functor], {bimap: Value});\n\n  //# Profunctor :: TypeClass\n  //.\n  //. `TypeClass` value for [Profunctor][].\n  //.\n  //. ```javascript\n  //. > Profunctor.test(Math.sqrt)\n  //. true\n  //.\n  //. > Profunctor.test([])\n  //. false\n  //. ```\n  var Profunctor = $('Profunctor', [Functor], {promap: Value});\n\n  //# Apply :: TypeClass\n  //.\n  //. `TypeClass` value for [Apply][].\n  //.\n  //. ```javascript\n  //. > Apply.test([])\n  //. true\n  //.\n  //. > Apply.test('')\n  //. false\n  //. ```\n  var Apply = $('Apply', [Functor], {ap: Value});\n\n  //# Applicative :: TypeClass\n  //.\n  //. `TypeClass` value for [Applicative][].\n  //.\n  //. ```javascript\n  //. > Applicative.test([])\n  //. true\n  //.\n  //. > Applicative.test({})\n  //. false\n  //. ```\n  var Applicative = $('Applicative', [Apply], {of: Constructor});\n\n  //# Chain :: TypeClass\n  //.\n  //. `TypeClass` value for [Chain][].\n  //.\n  //. ```javascript\n  //. > Chain.test([])\n  //. true\n  //.\n  //. > Chain.test({})\n  //. false\n  //. ```\n  var Chain = $('Chain', [Apply], {chain: Value});\n\n  //# ChainRec :: TypeClass\n  //.\n  //. `TypeClass` value for [ChainRec][].\n  //.\n  //. ```javascript\n  //. > ChainRec.test([])\n  //. true\n  //.\n  //. > ChainRec.test({})\n  //. false\n  //. ```\n  var ChainRec = $('ChainRec', [Chain], {chainRec: Constructor});\n\n  //# Monad :: TypeClass\n  //.\n  //. `TypeClass` value for [Monad][].\n  //.\n  //. ```javascript\n  //. > Monad.test([])\n  //. true\n  //.\n  //. > Monad.test({})\n  //. false\n  //. ```\n  var Monad = $('Monad', [Applicative, Chain], {});\n\n  //# Alt :: TypeClass\n  //.\n  //. `TypeClass` value for [Alt][].\n  //.\n  //. ```javascript\n  //. > Alt.test({})\n  //. true\n  //.\n  //. > Alt.test('')\n  //. false\n  //. ```\n  var Alt = $('Alt', [Functor], {alt: Value});\n\n  //# Plus :: TypeClass\n  //.\n  //. `TypeClass` value for [Plus][].\n  //.\n  //. ```javascript\n  //. > Plus.test({})\n  //. true\n  //.\n  //. > Plus.test('')\n  //. false\n  //. ```\n  var Plus = $('Plus', [Alt], {zero: Constructor});\n\n  //# Alternative :: TypeClass\n  //.\n  //. `TypeClass` value for [Alternative][].\n  //.\n  //. ```javascript\n  //. > Alternative.test([])\n  //. true\n  //.\n  //. > Alternative.test({})\n  //. false\n  //. ```\n  var Alternative = $('Alternative', [Applicative, Plus], {});\n\n  //# Foldable :: TypeClass\n  //.\n  //. `TypeClass` value for [Foldable][].\n  //.\n  //. ```javascript\n  //. > Foldable.test({})\n  //. true\n  //.\n  //. > Foldable.test('')\n  //. false\n  //. ```\n  var Foldable = $('Foldable', [], {reduce: Value});\n\n  //# Traversable :: TypeClass\n  //.\n  //. `TypeClass` value for [Traversable][].\n  //.\n  //. ```javascript\n  //. > Traversable.test([])\n  //. true\n  //.\n  //. > Traversable.test('')\n  //. false\n  //. ```\n  var Traversable = $('Traversable', [Functor, Foldable], {traverse: Value});\n\n  //# Extend :: TypeClass\n  //.\n  //. `TypeClass` value for [Extend][].\n  //.\n  //. ```javascript\n  //. > Extend.test([])\n  //. true\n  //.\n  //. > Extend.test({})\n  //. false\n  //. ```\n  var Extend = $('Extend', [Functor], {extend: Value});\n\n  //# Comonad :: TypeClass\n  //.\n  //. `TypeClass` value for [Comonad][].\n  //.\n  //. ```javascript\n  //. > Comonad.test(Identity(0))\n  //. true\n  //.\n  //. > Comonad.test([])\n  //. false\n  //. ```\n  var Comonad = $('Comonad', [Extend], {extract: Value});\n\n  //# Contravariant :: TypeClass\n  //.\n  //. `TypeClass` value for [Contravariant][].\n  //.\n  //. ```javascript\n  //. > Contravariant.test(Math.sqrt)\n  //. true\n  //.\n  //. > Contravariant.test([])\n  //. false\n  //. ```\n  var Contravariant = $('Contravariant', [], {contramap: Value});\n\n  //  Null$prototype$toString :: Null ~> () -> String\n  function Null$prototype$toString() {\n    return 'null';\n  }\n\n  //  Null$prototype$equals :: Null ~> Null -> Boolean\n  function Null$prototype$equals(other) {\n    return true;\n  }\n\n  //  Null$prototype$lte :: Null ~> Null -> Boolean\n  function Null$prototype$lte(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$toString :: Undefined ~> () -> String\n  function Undefined$prototype$toString() {\n    return 'undefined';\n  }\n\n  //  Undefined$prototype$equals :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$equals(other) {\n    return true;\n  }\n\n  //  Undefined$prototype$lte :: Undefined ~> Undefined -> Boolean\n  function Undefined$prototype$lte(other) {\n    return true;\n  }\n\n  //  Boolean$prototype$toString :: Boolean ~> () -> String\n  function Boolean$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Boolean(' + toString(this.valueOf()) + ')' :\n      this.toString();\n  }\n\n  //  Boolean$prototype$equals :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  Boolean$prototype$lte :: Boolean ~> Boolean -> Boolean\n  function Boolean$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this === false || other === true;\n  }\n\n  //  Number$prototype$toString :: Number ~> () -> String\n  function Number$prototype$toString() {\n    return typeof this === 'object' ?\n      'new Number(' + toString(this.valueOf()) + ')' :\n      1 / this === -Infinity ? '-0' : this.toString(10);\n  }\n\n  //  Number$prototype$equals :: Number ~> Number -> Boolean\n  function Number$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      isNaN(this) && isNaN(other) || this === other;\n  }\n\n  //  Number$prototype$lte :: Number ~> Number -> Boolean\n  function Number$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      isNaN(this) || this <= other;\n  }\n\n  //  Date$prototype$toString :: Date ~> () -> String\n  function Date$prototype$toString() {\n    var x = isNaN(this.valueOf()) ? NaN : this.toISOString();\n    return 'new Date(' + toString(x) + ')';\n  }\n\n  //  Date$prototype$equals :: Date ~> Date -> Boolean\n  function Date$prototype$equals(other) {\n    return equals(this.valueOf(), other.valueOf());\n  }\n\n  //  Date$prototype$lte :: Date ~> Date -> Boolean\n  function Date$prototype$lte(other) {\n    return lte(this.valueOf(), other.valueOf());\n  }\n\n  //  RegExp$prototype$equals :: RegExp ~> RegExp -> Boolean\n  function RegExp$prototype$equals(other) {\n    return other.source === this.source &&\n           other.global === this.global &&\n           other.ignoreCase === this.ignoreCase &&\n           other.multiline === this.multiline &&\n           other.sticky === this.sticky &&\n           other.unicode === this.unicode;\n  }\n\n  //  String$empty :: () -> String\n  function String$empty() {\n    return '';\n  }\n\n  //  String$prototype$toString :: String ~> () -> String\n  function String$prototype$toString() {\n    return typeof this === 'object' ?\n      'new String(' + toString(this.valueOf()) + ')' :\n      JSON.stringify(this);\n  }\n\n  //  String$prototype$equals :: String ~> String -> Boolean\n  function String$prototype$equals(other) {\n    return typeof this === 'object' ?\n      equals(this.valueOf(), other.valueOf()) :\n      this === other;\n  }\n\n  //  String$prototype$lte :: String ~> String -> Boolean\n  function String$prototype$lte(other) {\n    return typeof this === 'object' ?\n      lte(this.valueOf(), other.valueOf()) :\n      this <= other;\n  }\n\n  //  String$prototype$concat :: String ~> String -> String\n  function String$prototype$concat(other) {\n    return this + other;\n  }\n\n  //  Array$empty :: () -> Array a\n  function Array$empty() {\n    return [];\n  }\n\n  //  Array$of :: a -> Array a\n  function Array$of(x) {\n    return [x];\n  }\n\n  //  Array$chainRec :: ((a -> c, b -> c, a) -> Array c, a) -> Array b\n  function Array$chainRec(f, x) {\n    var result = [];\n    var nil = {};\n    var todo = {head: x, tail: nil};\n    while (todo !== nil) {\n      var more = nil;\n      var steps = f(iterationNext, iterationDone, todo.head);\n      for (var idx = 0; idx < steps.length; idx += 1) {\n        var step = steps[idx];\n        if (step.done) {\n          result.push(step.value);\n        } else {\n          more = {head: step.value, tail: more};\n        }\n      }\n      todo = todo.tail;\n      while (more !== nil) {\n        todo = {head: more.head, tail: todo};\n        more = more.tail;\n      }\n    }\n    return result;\n  }\n\n  //  Array$zero :: () -> Array a\n  function Array$zero() {\n    return [];\n  }\n\n  //  Array$prototype$toString :: Array a ~> () -> String\n  function Array$prototype$toString() {\n    var reprs = this.map(toString);\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      if (!/^\\d+$/.test(k)) {\n        reprs.push(toString(k) + ': ' + toString(this[k]));\n      }\n    }\n    return '[' + reprs.join(', ') + ']';\n  }\n\n  //  Array$prototype$equals :: Array a ~> Array a -> Boolean\n  function Array$prototype$equals(other) {\n    if (other.length !== this.length) return false;\n    for (var idx = 0; idx < this.length; idx += 1) {\n      if (!equals(this[idx], other[idx])) return false;\n    }\n    return true;\n  }\n\n  //  Array$prototype$lte :: Array a ~> Array a -> Boolean\n  function Array$prototype$lte(other) {\n    for (var idx = 0; true; idx += 1) {\n      if (idx === this.length) return true;\n      if (idx === other.length) return false;\n      if (!equals(this[idx], other[idx])) return lte(this[idx], other[idx]);\n    }\n  }\n\n  //  Array$prototype$concat :: Array a ~> Array a -> Array a\n  function Array$prototype$concat(other) {\n    return this.concat(other);\n  }\n\n  //  Array$prototype$filter :: Array a ~> (a -> Boolean) -> Array a\n  function Array$prototype$filter(pred) {\n    return this.filter(function(x) { return pred(x); });\n  }\n\n  //  Array$prototype$map :: Array a ~> (a -> b) -> Array b\n  function Array$prototype$map(f) {\n    return this.map(function(x) { return f(x); });\n  }\n\n  //  Array$prototype$ap :: Array a ~> Array (a -> b) -> Array b\n  function Array$prototype$ap(fs) {\n    var result = [];\n    for (var idx = 0; idx < fs.length; idx += 1) {\n      for (var idx2 = 0; idx2 < this.length; idx2 += 1) {\n        result.push(fs[idx](this[idx2]));\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$chain :: Array a ~> (a -> Array b) -> Array b\n  function Array$prototype$chain(f) {\n    var result = [];\n    for (var idx = 0; idx < this.length; idx += 1) {\n      for (var idx2 = 0, xs = f(this[idx]); idx2 < xs.length; idx2 += 1) {\n        result.push(xs[idx2]);\n      }\n    }\n    return result;\n  }\n\n  //  Array$prototype$alt :: Array a ~> Array a -> Array a\n  var Array$prototype$alt = Array$prototype$concat;\n\n  //  Array$prototype$reduce :: Array a ~> ((b, a) -> b, b) -> b\n  function Array$prototype$reduce(f, initial) {\n    var acc = initial;\n    for (var idx = 0; idx < this.length; idx += 1) acc = f(acc, this[idx]);\n    return acc;\n  }\n\n  //  Array$prototype$traverse :: Applicative f => Array a ~> (TypeRep f, a -> f b) -> f (Array b)\n  function Array$prototype$traverse(typeRep, f) {\n    var xs = this;\n    function go(idx, n) {\n      switch (n) {\n        case 0: return of(typeRep, []);\n        case 2: return lift2(pair, f(xs[idx]), f(xs[idx + 1]));\n        default:\n          var m = Math.floor(n / 4) * 2;\n          return lift2(concat_, go(idx, m), go(idx + m, n - m));\n      }\n    }\n    return this.length % 2 === 1 ?\n      lift2(concat_, map(Array$of, f(this[0])), go(1, this.length - 1)) :\n      go(0, this.length);\n  }\n\n  //  Array$prototype$extend :: Array a ~> (Array a -> b) -> Array b\n  function Array$prototype$extend(f) {\n    return this.map(function(_, idx, xs) { return f(xs.slice(idx)); });\n  }\n\n  //  Arguments$prototype$toString :: Arguments ~> String\n  function Arguments$prototype$toString() {\n    var args = Array.prototype.map.call(this, toString).join(', ');\n    return '(function () { return arguments; }(' + args + '))';\n  }\n\n  //  Arguments$prototype$equals :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$equals(other) {\n    return Array$prototype$equals.call(this, other);\n  }\n\n  //  Arguments$prototype$lte :: Arguments ~> Arguments -> Boolean\n  function Arguments$prototype$lte(other) {\n    return Array$prototype$lte.call(this, other);\n  }\n\n  //  Error$prototype$toString :: Error ~> () -> String\n  function Error$prototype$toString() {\n    return 'new ' + this.name + '(' + toString(this.message) + ')';\n  }\n\n  //  Error$prototype$equals :: Error ~> Error -> Boolean\n  function Error$prototype$equals(other) {\n    return equals(this.name, other.name) &&\n           equals(this.message, other.message);\n  }\n\n  //  Object$empty :: () -> StrMap a\n  function Object$empty() {\n    return {};\n  }\n\n  //  Object$zero :: () -> StrMap a\n  function Object$zero() {\n    return {};\n  }\n\n  //  Object$prototype$toString :: StrMap a ~> () -> String\n  function Object$prototype$toString() {\n    var reprs = [];\n    var keys = Object.keys(this).sort();\n    for (var idx = 0; idx < keys.length; idx += 1) {\n      var k = keys[idx];\n      reprs.push(toString(k) + ': ' + toString(this[k]));\n    }\n    return '{' + reprs.join(', ') + '}';\n  }\n\n  //  Object$prototype$equals :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$equals(other) {\n    var self = this;\n    var keys = Object.keys(this).sort();\n    return equals(keys, Object.keys(other).sort()) &&\n           keys.every(function(k) { return equals(self[k], other[k]); });\n  }\n\n  //  Object$prototype$lte :: StrMap a ~> StrMap a -> Boolean\n  function Object$prototype$lte(other) {\n    var theseKeys = Object.keys(this).sort();\n    var otherKeys = Object.keys(other).sort();\n    while (true) {\n      if (theseKeys.length === 0) return true;\n      if (otherKeys.length === 0) return false;\n      var k = theseKeys.shift();\n      var z = otherKeys.shift();\n      if (k < z) return true;\n      if (k > z) return false;\n      if (!equals(this[k], other[k])) return lte(this[k], other[k]);\n    }\n  }\n\n  //  Object$prototype$concat :: StrMap a ~> StrMap a -> StrMap a\n  function Object$prototype$concat(other) {\n    var result = {};\n    function assign(k) { result[k] = this[k]; }\n    forEachKey(this, assign);\n    forEachKey(other, assign);\n    return result;\n  }\n\n  //  Object$prototype$filter :: StrMap a ~> (a -> Boolean) -> StrMap a\n  function Object$prototype$filter(pred) {\n    var result = {};\n    forEachKey(this, function(k) { if (pred(this[k])) result[k] = this[k]; });\n    return result;\n  }\n\n  //  Object$prototype$map :: StrMap a ~> (a -> b) -> StrMap b\n  function Object$prototype$map(f) {\n    var result = {};\n    forEachKey(this, function(k) { result[k] = f(this[k]); });\n    return result;\n  }\n\n  //  Object$prototype$ap :: StrMap a ~> StrMap (a -> b) -> StrMap b\n  function Object$prototype$ap(other) {\n    var result = {};\n    forEachKey(this, function(k) {\n      if (has(k, other)) result[k] = other[k](this[k]);\n    });\n    return result;\n  }\n\n  //  Object$prototype$alt :: StrMap a ~> StrMap a -> StrMap a\n  var Object$prototype$alt = Object$prototype$concat;\n\n  //  Object$prototype$reduce :: StrMap a ~> ((b, a) -> b, b) -> b\n  function Object$prototype$reduce(f, initial) {\n    var self = this;\n    function reducer(acc, k) { return f(acc, self[k]); }\n    return Object.keys(this).sort().reduce(reducer, initial);\n  }\n\n  //  Object$prototype$traverse :: Applicative f => StrMap a ~> (TypeRep f, a -> f b) -> f (StrMap b)\n  function Object$prototype$traverse(typeRep, f) {\n    var self = this;\n    return Object.keys(this).reduce(function(applicative, k) {\n      function set(o) {\n        return function(v) {\n          var singleton = {}; singleton[k] = v;\n          return Object$prototype$concat.call(o, singleton);\n        };\n      }\n      return lift2(set, applicative, f(self[k]));\n    }, of(typeRep, {}));\n  }\n\n  //  Function$id :: () -> a -> a\n  function Function$id() {\n    return identity;\n  }\n\n  //  Function$of :: b -> (a -> b)\n  function Function$of(x) {\n    return function(_) { return x; };\n  }\n\n  //  Function$chainRec :: ((a -> c, b -> c, a) -> (z -> c), a) -> (z -> b)\n  function Function$chainRec(f, x) {\n    return function(a) {\n      var step = iterationNext(x);\n      while (!step.done) {\n        step = f(iterationNext, iterationDone, step.value)(a);\n      }\n      return step.value;\n    };\n  }\n\n  //  Function$prototype$equals :: Function ~> Function -> Boolean\n  function Function$prototype$equals(other) {\n    return other === this;\n  }\n\n  //  Function$prototype$compose :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$compose(other) {\n    var semigroupoid = this;\n    return function(x) { return other(semigroupoid(x)); };\n  }\n\n  //  Function$prototype$map :: (a -> b) ~> (b -> c) -> (a -> c)\n  function Function$prototype$map(f) {\n    var functor = this;\n    return function(x) { return f(functor(x)); };\n  }\n\n  //  Function$prototype$promap :: (b -> c) ~> (a -> b, c -> d) -> (a -> d)\n  function Function$prototype$promap(f, g) {\n    var profunctor = this;\n    return function(x) { return g(profunctor(f(x))); };\n  }\n\n  //  Function$prototype$ap :: (a -> b) ~> (a -> b -> c) -> (a -> c)\n  function Function$prototype$ap(f) {\n    var apply = this;\n    return function(x) { return f(x)(apply(x)); };\n  }\n\n  //  Function$prototype$chain :: (a -> b) ~> (b -> a -> c) -> (a -> c)\n  function Function$prototype$chain(f) {\n    var chain = this;\n    return function(x) { return f(chain(x))(x); };\n  }\n\n  //  Function$prototype$extend :: Semigroup a => (a -> b) ~> ((a -> b) -> c) -> (a -> c)\n  function Function$prototype$extend(f) {\n    var extend = this;\n    return function(x) {\n      return f(function(y) { return extend(concat(x, y)); });\n    };\n  }\n\n  //  Function$prototype$contramap :: (b -> c) ~> (a -> b) -> (a -> c)\n  function Function$prototype$contramap(f) {\n    var contravariant = this;\n    return function(x) { return contravariant(f(x)); };\n  }\n\n  /* eslint-disable key-spacing */\n  var implementations = {\n    Null: {\n      'prototype': {\n        'toString':                 Null$prototype$toString,\n        'fantasy-land/equals':      Null$prototype$equals,\n        'fantasy-land/lte':         Null$prototype$lte\n      }\n    },\n    Undefined: {\n      'prototype': {\n        'toString':                 Undefined$prototype$toString,\n        'fantasy-land/equals':      Undefined$prototype$equals,\n        'fantasy-land/lte':         Undefined$prototype$lte\n      }\n    },\n    Boolean: {\n      'prototype': {\n        'toString':                 Boolean$prototype$toString,\n        'fantasy-land/equals':      Boolean$prototype$equals,\n        'fantasy-land/lte':         Boolean$prototype$lte\n      }\n    },\n    Number: {\n      'prototype': {\n        'toString':                 Number$prototype$toString,\n        'fantasy-land/equals':      Number$prototype$equals,\n        'fantasy-land/lte':         Number$prototype$lte\n      }\n    },\n    Date: {\n      'prototype': {\n        'toString':                 Date$prototype$toString,\n        'fantasy-land/equals':      Date$prototype$equals,\n        'fantasy-land/lte':         Date$prototype$lte\n      }\n    },\n    RegExp: {\n      'prototype': {\n        'fantasy-land/equals':      RegExp$prototype$equals\n      }\n    },\n    String: {\n      'fantasy-land/empty':         String$empty,\n      'prototype': {\n        'toString':                 String$prototype$toString,\n        'fantasy-land/equals':      String$prototype$equals,\n        'fantasy-land/lte':         String$prototype$lte,\n        'fantasy-land/concat':      String$prototype$concat\n      }\n    },\n    Array: {\n      'fantasy-land/empty':         Array$empty,\n      'fantasy-land/of':            Array$of,\n      'fantasy-land/chainRec':      Array$chainRec,\n      'fantasy-land/zero':          Array$zero,\n      'prototype': {\n        'toString':                 Array$prototype$toString,\n        'fantasy-land/equals':      Array$prototype$equals,\n        'fantasy-land/lte':         Array$prototype$lte,\n        'fantasy-land/concat':      Array$prototype$concat,\n        'fantasy-land/filter':      Array$prototype$filter,\n        'fantasy-land/map':         Array$prototype$map,\n        'fantasy-land/ap':          Array$prototype$ap,\n        'fantasy-land/chain':       Array$prototype$chain,\n        'fantasy-land/alt':         Array$prototype$alt,\n        'fantasy-land/reduce':      Array$prototype$reduce,\n        'fantasy-land/traverse':    Array$prototype$traverse,\n        'fantasy-land/extend':      Array$prototype$extend\n      }\n    },\n    Arguments: {\n      'prototype': {\n        'toString':                 Arguments$prototype$toString,\n        'fantasy-land/equals':      Arguments$prototype$equals,\n        'fantasy-land/lte':         Arguments$prototype$lte\n      }\n    },\n    Error: {\n      'prototype': {\n        'toString':                 Error$prototype$toString,\n        'fantasy-land/equals':      Error$prototype$equals\n      }\n    },\n    Object: {\n      'fantasy-land/empty':         Object$empty,\n      'fantasy-land/zero':          Object$zero,\n      'prototype': {\n        'toString':                 Object$prototype$toString,\n        'fantasy-land/equals':      Object$prototype$equals,\n        'fantasy-land/lte':         Object$prototype$lte,\n        'fantasy-land/concat':      Object$prototype$concat,\n        'fantasy-land/filter':      Object$prototype$filter,\n        'fantasy-land/map':         Object$prototype$map,\n        'fantasy-land/ap':          Object$prototype$ap,\n        'fantasy-land/alt':         Object$prototype$alt,\n        'fantasy-land/reduce':      Object$prototype$reduce,\n        'fantasy-land/traverse':    Object$prototype$traverse\n      }\n    },\n    Function: {\n      'fantasy-land/id':            Function$id,\n      'fantasy-land/of':            Function$of,\n      'fantasy-land/chainRec':      Function$chainRec,\n      'prototype': {\n        'fantasy-land/equals':      Function$prototype$equals,\n        'fantasy-land/compose':     Function$prototype$compose,\n        'fantasy-land/map':         Function$prototype$map,\n        'fantasy-land/promap':      Function$prototype$promap,\n        'fantasy-land/ap':          Function$prototype$ap,\n        'fantasy-land/chain':       Function$prototype$chain,\n        'fantasy-land/extend':      Function$prototype$extend,\n        'fantasy-land/contramap':   Function$prototype$contramap\n      }\n    }\n  };\n  /* eslint-enable key-spacing */\n\n  //# toString :: a -> String\n  //.\n  //. Returns a useful string representation of its argument.\n  //.\n  //. Dispatches to the argument's `toString` method if appropriate.\n  //.\n  //. Where practical, `equals(eval(toString(x)), x) = true`.\n  //.\n  //. `toString` implementations are provided for the following built-in types:\n  //. Null, Undefined, Boolean, Number, Date, String, Array, Arguments, Error,\n  //. and Object.\n  //.\n  //. ```javascript\n  //. > toString(-0)\n  //. '-0'\n  //.\n  //. > toString(['foo', 'bar', 'baz'])\n  //. '[\"foo\", \"bar\", \"baz\"]'\n  //.\n  //. > toString({x: 1, y: 2, z: 3})\n  //. '{\"x\": 1, \"y\": 2, \"z\": 3}'\n  //.\n  //. > toString(Cons(1, Cons(2, Cons(3, Nil))))\n  //. 'Cons(1, Cons(2, Cons(3, Nil)))'\n  //. ```\n  var toString = (function() {\n    //  $seen :: Array Any\n    var $seen = [];\n\n    function call(method, x) {\n      $seen.push(x);\n      try { return method.call(x); } finally { $seen.pop(); }\n    }\n\n    return function toString(x) {\n      if ($seen.indexOf(x) >= 0) return '<Circular>';\n\n      var xType = type(x);\n      if (xType === 'Object') {\n        var result;\n        try { result = call(x.toString, x); } catch (err) {}\n        if (result != null && result !== '[object Object]') return result;\n      }\n\n      return call(implPath([xType, 'prototype', 'toString']) || x.toString, x);\n    };\n  }());\n\n  //# equals :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and equal according\n  //. to the type's [`fantasy-land/equals`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/equals` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, RegExp, String,\n  //. Array, Arguments, Error, Object, and Function.\n  //.\n  //. The algorithm supports circular data structures. Two arrays are equal\n  //. if they have the same index paths and for each path have equal values.\n  //. Two arrays which represent `[1, [1, [1, [1, [1, ...]]]]]`, for example,\n  //. are equal even if their internal structures differ. Two objects are equal\n  //. if they have the same property paths and for each path have equal values.\n  //.\n  //. ```javascript\n  //. > equals(0, -0)\n  //. true\n  //.\n  //. > equals(NaN, NaN)\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('foo', Cons('bar', Nil)))\n  //. true\n  //.\n  //. > equals(Cons('foo', Cons('bar', Nil)), Cons('bar', Cons('foo', Nil)))\n  //. false\n  //. ```\n  var equals = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function equals(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return true;\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Setoid.test(x) && Setoid.test(y) && Setoid.methods.equals(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# lt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. less than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`gt`](#gt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lt(0, 0)\n  //. false\n  //.\n  //. > lt(0, 1)\n  //. true\n  //.\n  //. > lt(1, 0)\n  //. false\n  //. ```\n  function lt(x, y) {\n    return sameType(x, y) && !lte(y, x);\n  }\n\n  //# lte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is less than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. `fantasy-land/lte` implementations are provided for the following\n  //. built-in types: Null, Undefined, Boolean, Number, Date, String, Array,\n  //. Arguments, and Object.\n  //.\n  //. The algorithm supports circular data structures in the same manner as\n  //. [`equals`](#equals).\n  //.\n  //. See also [`lt`](#lt), [`gt`](#gt), and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > lte(0, 0)\n  //. true\n  //.\n  //. > lte(0, 1)\n  //. true\n  //.\n  //. > lte(1, 0)\n  //. false\n  //. ```\n  var lte = (function() {\n    //  $pairs :: Array (Array2 Any Any)\n    var $pairs = [];\n\n    return function lte(x, y) {\n      if (!sameType(x, y)) return false;\n\n      //  This algorithm for comparing circular data structures was\n      //  suggested in <http://stackoverflow.com/a/40622794/312785>.\n      if ($pairs.some(function(p) { return p[0] === x && p[1] === y; })) {\n        return equals(x, y);\n      }\n\n      $pairs.push([x, y]);\n      try {\n        return Ord.test(x) && Ord.test(y) && Ord.methods.lte(x)(y);\n      } finally {\n        $pairs.pop();\n      }\n    };\n  }());\n\n  //# gt :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first is\n  //. greater than the second according to the type's [`fantasy-land/lte`][]\n  //. method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gte`](#gte).\n  //.\n  //. ```javascript\n  //. > gt(0, 0)\n  //. false\n  //.\n  //. > gt(0, 1)\n  //. false\n  //.\n  //. > gt(1, 0)\n  //. true\n  //. ```\n  function gt(x, y) {\n    return lt(y, x);\n  }\n\n  //# gte :: (a, b) -> Boolean\n  //.\n  //. Returns `true` if its arguments are of the same type and the first\n  //. is greater than or equal to the second according to the type's\n  //. [`fantasy-land/lte`][] method; `false` otherwise.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`lt`](#lt) and [`gt`](#gt).\n  //.\n  //. ```javascript\n  //. > gte(0, 0)\n  //. true\n  //.\n  //. > gte(0, 1)\n  //. false\n  //.\n  //. > gte(1, 0)\n  //. true\n  //. ```\n  function gte(x, y) {\n    return lte(y, x);\n  }\n\n  //# min :: Ord a => (a, a) -> a\n  //.\n  //. Returns the smaller of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`max`](#max).\n  //.\n  //. ```javascript\n  //. > min(10, 2)\n  //. 2\n  //.\n  //. > min(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('1999-12-31')\n  //.\n  //. > min('10', '2')\n  //. '10'\n  //. ```\n  function min(x, y) {\n    return lte(x, y) ? x : y;\n  }\n\n  //# max :: Ord a => (a, a) -> a\n  //.\n  //. Returns the larger of its two arguments.\n  //.\n  //. This function is derived from [`lte`](#lte).\n  //.\n  //. See also [`min`](#min).\n  //.\n  //. ```javascript\n  //. > max(10, 2)\n  //. 10\n  //.\n  //. > max(new Date('1999-12-31'), new Date('2000-01-01'))\n  //. new Date('2000-01-01')\n  //.\n  //. > max('10', '2')\n  //. '2'\n  //. ```\n  function max(x, y) {\n    return lte(x, y) ? y : x;\n  }\n\n  //# compose :: Semigroupoid c => (c j k, c i j) -> c i k\n  //.\n  //. Function wrapper for [`fantasy-land/compose`][].\n  //.\n  //. `fantasy-land/compose` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > compose(Math.sqrt, x => x + 1)(99)\n  //. 10\n  //. ```\n  function compose(x, y) {\n    return Semigroupoid.methods.compose(y)(x);\n  }\n\n  //# id :: Category c => TypeRep c -> c\n  //.\n  //. Function wrapper for [`fantasy-land/id`][].\n  //.\n  //. `fantasy-land/id` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > id(Function)('foo')\n  //. 'foo'\n  //. ```\n  function id(typeRep) {\n    return Category.methods.id(typeRep)();\n  }\n\n  //# concat :: Semigroup a => (a, a) -> a\n  //.\n  //. Function wrapper for [`fantasy-land/concat`][].\n  //.\n  //. `fantasy-land/concat` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > concat('abc', 'def')\n  //. 'abcdef'\n  //.\n  //. > concat([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > concat({x: 1, y: 2}, {y: 3, z: 4})\n  //. {x: 1, y: 3, z: 4}\n  //.\n  //. > concat(Cons('foo', Cons('bar', Cons('baz', Nil))), Cons('quux', Nil))\n  //. Cons('foo', Cons('bar', Cons('baz', Cons('quux', Nil))))\n  //. ```\n  function concat(x, y) {\n    return Semigroup.methods.concat(x)(y);\n  }\n\n  //# empty :: Monoid m => TypeRep m -> m\n  //.\n  //. Function wrapper for [`fantasy-land/empty`][].\n  //.\n  //. `fantasy-land/empty` implementations are provided for the following\n  //. built-in types: String, Array, and Object.\n  //.\n  //. ```javascript\n  //. > empty(String)\n  //. ''\n  //.\n  //. > empty(Array)\n  //. []\n  //.\n  //. > empty(Object)\n  //. {}\n  //.\n  //. > empty(List)\n  //. Nil\n  //. ```\n  function empty(typeRep) {\n    return Monoid.methods.empty(typeRep)();\n  }\n\n  //# invert :: Group g => g -> g\n  //.\n  //. Function wrapper for [`fantasy-land/invert`][].\n  //.\n  //. ```javascript\n  //. > invert(Sum(5))\n  //. Sum(-5)\n  //. ```\n  function invert(group) {\n    return Group.methods.invert(group)();\n  }\n\n  //# filter :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/filter`][]. Discards every element\n  //. which does not satisfy the predicate.\n  //.\n  //. `fantasy-land/filter` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`reject`](#reject).\n  //.\n  //. ```javascript\n  //. > filter(x => x % 2 == 1, [1, 2, 3])\n  //. [1, 3]\n  //.\n  //. > filter(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {x: 1, z: 3}\n  //.\n  //. > filter(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > filter(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(0))\n  //. Nothing\n  //.\n  //. > filter(x => x % 2 == 1, Just(1))\n  //. Just(1)\n  //. ```\n  function filter(pred, filterable) {\n    return Filterable.methods.filter(filterable)(pred);\n  }\n\n  //# reject :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards every element which satisfies the predicate.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. ```javascript\n  //. > reject(x => x % 2 == 1, [1, 2, 3])\n  //. [2]\n  //.\n  //. > reject(x => x % 2 == 1, {x: 1, y: 2, z: 3})\n  //. {y: 2}\n  //.\n  //. > reject(x => x % 2 == 1, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(2, Nil)\n  //.\n  //. > reject(x => x % 2 == 1, Nothing)\n  //. Nothing\n  //.\n  //. > reject(x => x % 2 == 1, Just(0))\n  //. Just(0)\n  //.\n  //. > reject(x => x % 2 == 1, Just(1))\n  //. Nothing\n  //. ```\n  function reject(pred, filterable) {\n    return filter(function(x) { return !pred(x); }, filterable);\n  }\n\n  //# takeWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Discards the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`dropWhile`](#dropWhile).\n  //.\n  //. ```javascript\n  //. > takeWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx']\n  //.\n  //. > takeWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy']\n  //.\n  //. > takeWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. []\n  //. ```\n  function takeWhile(pred, filterable) {\n    var take = true;\n    return filter(function(x) { return take = take && pred(x); }, filterable);\n  }\n\n  //# dropWhile :: Filterable f => (a -> Boolean, f a) -> f a\n  //.\n  //. Retains the first element which does not satisfy the predicate, and all\n  //. subsequent elements.\n  //.\n  //. This function is derived from [`filter`](#filter).\n  //.\n  //. See also [`takeWhile`](#takeWhile).\n  //.\n  //. ```javascript\n  //. > dropWhile(s => /x/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /y/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xz', 'yx', 'yz', 'zx', 'zy']\n  //.\n  //. > dropWhile(s => /z/.test(s), ['xy', 'xz', 'yx', 'yz', 'zx', 'zy'])\n  //. ['xy', 'xz', 'yx', 'yz', 'zx', 'zy']\n  //. ```\n  function dropWhile(pred, filterable) {\n    var take = false;\n    return filter(function(x) { return take = take || !pred(x); }, filterable);\n  }\n\n  //# map :: Functor f => (a -> b, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/map`][].\n  //.\n  //. `fantasy-land/map` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > map(Math.sqrt, [1, 4, 9])\n  //. [1, 2, 3]\n  //.\n  //. > map(Math.sqrt, {x: 1, y: 4, z: 9})\n  //. {x: 1, y: 2, z: 3}\n  //.\n  //. > map(Math.sqrt, s => s.length)('Sanctuary')\n  //. 3\n  //.\n  //. > map(Math.sqrt, Tuple('foo', 64))\n  //. Tuple('foo', 8)\n  //.\n  //. > map(Math.sqrt, Nil)\n  //. Nil\n  //.\n  //. > map(Math.sqrt, Cons(1, Cons(4, Cons(9, Nil))))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function map(f, functor) {\n    return Functor.methods.map(functor)(f);\n  }\n\n  //# flip :: Functor f => (f (a -> b), a) -> f b\n  //.\n  //. Maps over the given functions, applying each to the given value.\n  //.\n  //. This function is derived from [`map`](#map).\n  //.\n  //. ```javascript\n  //. > flip(x => y => x + y, '!')('foo')\n  //. 'foo!'\n  //.\n  //. > flip([Math.floor, Math.ceil], 1.5)\n  //. [1, 2]\n  //.\n  //. > flip({floor: Math.floor, ceil: Math.ceil}, 1.5)\n  //. {floor: 1, ceil: 2}\n  //.\n  //. > flip(Cons(Math.floor, Cons(Math.ceil, Nil)), 1.5)\n  //. Cons(1, Cons(2, Nil))\n  //. ```\n  function flip(functor, x) {\n    return Functor.methods.map(functor)(thrush(x));\n  }\n\n  //# bimap :: Bifunctor f => (a -> b, c -> d, f a c) -> f b d\n  //.\n  //. Function wrapper for [`fantasy-land/bimap`][].\n  //.\n  //. ```javascript\n  //. > bimap(s => s.toUpperCase(), Math.sqrt, Tuple('foo', 64))\n  //. Tuple('FOO', 8)\n  //. ```\n  function bimap(f, g, bifunctor) {\n    return Bifunctor.methods.bimap(bifunctor)(f, g);\n  }\n\n  //# mapLeft :: Bifunctor f => (a -> b, f a c) -> f b c\n  //.\n  //. Maps the given function over the left side of a Bifunctor.\n  //.\n  //. ```javascript\n  //. > mapLeft(Math.sqrt, Tuple(64, 9))\n  //. Tuple(8, 9)\n  //. ```\n  function mapLeft(f, bifunctor) {\n    return bimap(f, identity, bifunctor);\n  }\n\n  //# promap :: Profunctor p => (a -> b, c -> d, p b c) -> p a d\n  //.\n  //. Function wrapper for [`fantasy-land/promap`][].\n  //.\n  //. `fantasy-land/promap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > promap(Math.abs, x => x + 1, Math.sqrt)(-100)\n  //. 11\n  //. ```\n  function promap(f, g, profunctor) {\n    return Profunctor.methods.promap(profunctor)(f, g);\n  }\n\n  //# ap :: Apply f => (f (a -> b), f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/ap`][].\n  //.\n  //. `fantasy-land/ap` implementations are provided for the following\n  //. built-in types: Array, Object, and Function.\n  //.\n  //. ```javascript\n  //. > ap([Math.sqrt, x => x * x], [1, 4, 9, 16, 25])\n  //. [1, 2, 3, 4, 5, 1, 16, 81, 256, 625]\n  //.\n  //. > ap({a: Math.sqrt, b: x => x * x}, {a: 16, b: 10, c: 1})\n  //. {a: 4, b: 100}\n  //.\n  //. > ap(s => n => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //.\n  //. > ap(Identity(Math.sqrt), Identity(64))\n  //. Identity(8)\n  //.\n  //. > ap(Cons(Math.sqrt, Cons(x => x * x, Nil)), Cons(16, Cons(100, Nil)))\n  //. Cons(4, Cons(10, Cons(256, Cons(10000, Nil))))\n  //. ```\n  function ap(applyF, applyX) {\n    return Apply.methods.ap(applyX)(applyF);\n  }\n\n  //# lift2 :: Apply f => (a -> b -> c, f a, f b) -> f c\n  //.\n  //. Lifts `a -> b -> c` to `Apply f => f a -> f b -> f c` and returns the\n  //. result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift3`](#lift3).\n  //.\n  //. ```javascript\n  //. > lift2(x => y => Math.pow(x, y), [10], [1, 2, 3])\n  //. [10, 100, 1000]\n  //.\n  //. > lift2(x => y => Math.pow(x, y), Identity(10), Identity(3))\n  //. Identity(1000)\n  //. ```\n  function lift2(f, x, y) {\n    return ap(map(f, x), y);\n  }\n\n  //# lift3 :: Apply f => (a -> b -> c -> d, f a, f b, f c) -> f d\n  //.\n  //. Lifts `a -> b -> c -> d` to `Apply f => f a -> f b -> f c -> f d` and\n  //. returns the result of applying this to the given arguments.\n  //.\n  //. This function is derived from [`map`](#map) and [`ap`](#ap).\n  //.\n  //. See also [`lift2`](#lift2).\n  //.\n  //. ```javascript\n  //. > lift3(x => y => z => x + z + y, ['<'], ['>'], ['foo', 'bar', 'baz'])\n  //. ['<foo>', '<bar>', '<baz>']\n  //.\n  //. > lift3(x => y => z => x + z + y, Identity('<'), Identity('>'), Identity('baz'))\n  //. Identity('<baz>')\n  //. ```\n  function lift3(f, x, y, z) {\n    return ap(ap(map(f, x), y), z);\n  }\n\n  //# apFirst :: Apply f => (f a, f b) -> f a\n  //.\n  //. Combines two effectful actions, keeping only the result of the first.\n  //. Equivalent to Haskell's `(<*)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apSecond`](#apSecond).\n  //.\n  //. ```javascript\n  //. > apFirst([1, 2], [3, 4])\n  //. [1, 1, 2, 2]\n  //.\n  //. > apFirst(Identity(1), Identity(2))\n  //. Identity(1)\n  //. ```\n  function apFirst(x, y) {\n    return lift2(constant, x, y);\n  }\n\n  //# apSecond :: Apply f => (f a, f b) -> f b\n  //.\n  //. Combines two effectful actions, keeping only the result of the second.\n  //. Equivalent to Haskell's `(*>)` function.\n  //.\n  //. This function is derived from [`lift2`](#lift2).\n  //.\n  //. See also [`apFirst`](#apFirst).\n  //.\n  //. ```javascript\n  //. > apSecond([1, 2], [3, 4])\n  //. [3, 4, 3, 4]\n  //.\n  //. > apSecond(Identity(1), Identity(2))\n  //. Identity(2)\n  //. ```\n  function apSecond(x, y) {\n    return lift2(constant(identity), x, y);\n  }\n\n  //# of :: Applicative f => (TypeRep f, a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/of`][].\n  //.\n  //. `fantasy-land/of` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > of(Array, 42)\n  //. [42]\n  //.\n  //. > of(Function, 42)(null)\n  //. 42\n  //.\n  //. > of(List, 42)\n  //. Cons(42, Nil)\n  //. ```\n  function of(typeRep, x) {\n    return Applicative.methods.of(typeRep)(x);\n  }\n\n  //# append :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of appending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`prepend`](#prepend).\n  //.\n  //. ```javascript\n  //. > append(3, [1, 2])\n  //. [1, 2, 3]\n  //.\n  //. > append(3, Cons(1, Cons(2, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function append(x, xs) {\n    return concat(xs, of(xs.constructor, x));\n  }\n\n  //# prepend :: (Applicative f, Semigroup (f a)) => (a, f a) -> f a\n  //.\n  //. Returns the result of prepending the first argument to the second.\n  //.\n  //. This function is derived from [`concat`](#concat) and [`of`](#of).\n  //.\n  //. See also [`append`](#append).\n  //.\n  //. ```javascript\n  //. > prepend(1, [2, 3])\n  //. [1, 2, 3]\n  //.\n  //. > prepend(1, Cons(2, Cons(3, Nil)))\n  //. Cons(1, Cons(2, Cons(3, Nil)))\n  //. ```\n  function prepend(x, xs) {\n    return concat(of(xs.constructor, x), xs);\n  }\n\n  //# chain :: Chain m => (a -> m b, m a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chain`][].\n  //.\n  //. `fantasy-land/chain` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > chain(x => [x, x], [1, 2, 3])\n  //. [1, 1, 2, 2, 3, 3]\n  //.\n  //. > chain(x => x % 2 == 1 ? of(List, x) : Nil, Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(1, Cons(3, Nil))\n  //.\n  //. > chain(n => s => s.slice(0, n), s => Math.ceil(s.length / 2))('Haskell')\n  //. 'Hask'\n  //. ```\n  function chain(f, chain_) {\n    return Chain.methods.chain(chain_)(f);\n  }\n\n  //# join :: Chain m => m (m a) -> m a\n  //.\n  //. Removes one level of nesting from a nested monadic structure.\n  //.\n  //. This function is derived from [`chain`](#chain).\n  //.\n  //. ```javascript\n  //. > join([[1], [2], [3]])\n  //. [1, 2, 3]\n  //.\n  //. > join([[[1, 2, 3]]])\n  //. [[1, 2, 3]]\n  //.\n  //. > join(Identity(Identity(1)))\n  //. Identity(1)\n  //. ```\n  function join(chain_) {\n    return chain(identity, chain_);\n  }\n\n  //# chainRec :: ChainRec m => (TypeRep m, (a -> c, b -> c, a) -> m c, a) -> m b\n  //.\n  //. Function wrapper for [`fantasy-land/chainRec`][].\n  //.\n  //. `fantasy-land/chainRec` implementations are provided for the following\n  //. built-in types: Array.\n  //.\n  //. ```javascript\n  //. > chainRec(\n  //. .   Array,\n  //. .   (next, done, s) => s.length == 2 ? [s + '!', s + '?'].map(done)\n  //. .                                    : [s + 'o', s + 'n'].map(next),\n  //. .   ''\n  //. . )\n  //. ['oo!', 'oo?', 'on!', 'on?', 'no!', 'no?', 'nn!', 'nn?']\n  //. ```\n  function chainRec(typeRep, f, x) {\n    return ChainRec.methods.chainRec(typeRep)(f, x);\n  }\n\n  //# alt :: Alt f => (f a, f a) -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/alt`][].\n  //.\n  //. `fantasy-land/alt` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > alt([1, 2, 3], [4, 5, 6])\n  //. [1, 2, 3, 4, 5, 6]\n  //.\n  //. > alt(Nothing, Nothing)\n  //. Nothing\n  //.\n  //. > alt(Nothing, Just(1))\n  //. Just(1)\n  //.\n  //. > alt(Just(2), Just(3))\n  //. Just(2)\n  //. ```\n  function alt(x, y) {\n    return Alt.methods.alt(x)(y);\n  }\n\n  //# zero :: Plus f => TypeRep f -> f a\n  //.\n  //. Function wrapper for [`fantasy-land/zero`][].\n  //.\n  //. `fantasy-land/zero` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > zero(Array)\n  //. []\n  //.\n  //. > zero(Object)\n  //. {}\n  //.\n  //. > zero(Maybe)\n  //. Nothing\n  //. ```\n  function zero(typeRep) {\n    return Plus.methods.zero(typeRep)();\n  }\n\n  //# reduce :: Foldable f => ((b, a) -> b, b, f a) -> b\n  //.\n  //. Function wrapper for [`fantasy-land/reduce`][].\n  //.\n  //. `fantasy-land/reduce` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. ```javascript\n  //. > reduce((xs, x) => [x].concat(xs), [], [1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reduce(concat, '', Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 'foobarbaz'\n  //. ```\n  function reduce(f, x, foldable) {\n    return Foldable.methods.reduce(foldable)(f, x);\n  }\n\n  //# size :: Foldable f => f a -> Integer\n  //.\n  //. Returns the number of elements of the given structure.\n  //.\n  //. This function is derived from [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > size([])\n  //. 0\n  //.\n  //. > size(['foo', 'bar', 'baz'])\n  //. 3\n  //.\n  //. > size(Nil)\n  //. 0\n  //.\n  //. > size(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. 3\n  //. ```\n  function size(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.length;\n    return reduce(function(n, _) { return n + 1; }, 0, foldable);\n  }\n\n  //# elem :: (Setoid a, Foldable f) => (a, f a) -> Boolean\n  //.\n  //. Takes a value and a structure and returns `true` if the\n  //. value is an element of the structure; `false` otherwise.\n  //.\n  //. This function is derived from [`equals`](#equals) and\n  //. [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > elem('c', ['a', 'b', 'c'])\n  //. true\n  //.\n  //. > elem('x', ['a', 'b', 'c'])\n  //. false\n  //.\n  //. > elem(3, {x: 1, y: 2, z: 3})\n  //. true\n  //.\n  //. > elem(8, {x: 1, y: 2, z: 3})\n  //. false\n  //.\n  //. > elem(0, Just(0))\n  //. true\n  //.\n  //. > elem(0, Just(1))\n  //. false\n  //.\n  //. > elem(0, Nothing)\n  //. false\n  //. ```\n  function elem(x, foldable) {\n    return reduce(function(b, y) { return b || equals(x, y); },\n                  false,\n                  foldable);\n  }\n\n  //# foldMap :: (Monoid m, Foldable f) => (TypeRep m, a -> m, f a) -> m\n  //.\n  //. Deconstructs a foldable by mapping every element to a monoid and\n  //. concatenating the results.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > foldMap(String, f => f.name, [Math.sin, Math.cos, Math.tan])\n  //. 'sincostan'\n  //. ```\n  function foldMap(typeRep, f, foldable) {\n    return reduce(function(monoid, x) { return concat(monoid, f(x)); },\n                  empty(typeRep),\n                  foldable);\n  }\n\n  //# reverse :: (Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Reverses the elements of the given structure.\n  //.\n  //. This function is derived from [`concat`](#concat), [`empty`](#empty),\n  //. [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. ```javascript\n  //. > reverse([1, 2, 3])\n  //. [3, 2, 1]\n  //.\n  //. > reverse(Cons(1, Cons(2, Cons(3, Nil))))\n  //. Cons(3, Cons(2, Cons(1, Nil)))\n  //. ```\n  function reverse(foldable) {\n    //  Fast path for arrays.\n    if (Array.isArray(foldable)) return foldable.slice().reverse();\n    var F = foldable.constructor;\n    return reduce(function(xs, x) { return concat(of(F, x), xs); },\n                  empty(F),\n                  foldable);\n  }\n\n  //# sort :: (Ord a, Applicative f, Foldable f, Monoid (f a)) => f a -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) for comparisons.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sortBy`](#sortBy).\n  //.\n  //. ```javascript\n  //. > sort(['foo', 'bar', 'baz'])\n  //. ['bar', 'baz', 'foo']\n  //.\n  //. > sort([Just(2), Nothing, Just(1)])\n  //. [Nothing, Just(1), Just(2)]\n  //.\n  //. > sort(Cons('foo', Cons('bar', Cons('baz', Nil))))\n  //. Cons('bar', Cons('baz', Cons('foo', Nil)))\n  //. ```\n  function sort(foldable) {\n    return sortBy(identity, foldable);\n  }\n\n  //# sortBy :: (Ord b, Applicative f, Foldable f, Monoid (f a)) => (a -> b, f a) -> f a\n  //.\n  //. Performs a [stable sort][] of the elements of the given structure,\n  //. using [`lte`](#lte) to compare the values produced by applying the\n  //. given function to each element of the structure.\n  //.\n  //. This function is derived from [`lte`](#lte), [`concat`](#concat),\n  //. [`empty`](#empty), [`of`](#of), and [`reduce`](#reduce).\n  //.\n  //. See also [`sort`](#sort).\n  //.\n  //. ```javascript\n  //. > sortBy(s => s.length, ['red', 'green', 'blue'])\n  //. ['red', 'blue', 'green']\n  //.\n  //. > sortBy(s => s.length, ['black', 'white'])\n  //. ['black', 'white']\n  //.\n  //. > sortBy(s => s.length, ['white', 'black'])\n  //. ['white', 'black']\n  //.\n  //. > sortBy(s => s.length, Cons('red', Cons('green', Cons('blue', Nil))))\n  //. Cons('red', Cons('blue', Cons('green', Nil)))\n  //. ```\n  function sortBy(f, foldable) {\n    var rs = reduce(function(rs, x) {\n      rs.push({idx: rs.length, x: x, fx: f(x)});\n      return rs;\n    }, [], foldable);\n\n    var lte_ = (function(r) {\n      switch (typeof (r && r.fx)) {\n        case 'number':  return function(x, y) { return x <= y || x !== x; };\n        case 'string':  return function(x, y) { return x <= y; };\n        default:        return lte;\n      }\n    }(rs[0]));\n\n    rs.sort(function(a, b) {\n      return lte_(a.fx, b.fx) ? lte_(b.fx, a.fx) ? a.idx - b.idx : -1 : 1;\n    });\n\n    if (Array.isArray(foldable)) {\n      for (var idx = 0; idx < rs.length; idx += 1) rs[idx] = rs[idx].x;\n      return rs;\n    }\n\n    var F = foldable.constructor;\n    var result = empty(F);\n    for (idx = 0; idx < rs.length; idx += 1) {\n      result = concat(result, of(F, rs[idx].x));\n    }\n    return result;\n  }\n\n  //# traverse :: (Applicative f, Traversable t) => (TypeRep f, a -> f b, t a) -> f (t b)\n  //.\n  //. Function wrapper for [`fantasy-land/traverse`][].\n  //.\n  //. `fantasy-land/traverse` implementations are provided for the following\n  //. built-in types: Array and Object.\n  //.\n  //. See also [`sequence`](#sequence).\n  //.\n  //. ```javascript\n  //. > traverse(Array, x => x, [[1, 2, 3], [4, 5]])\n  //. [[1, 4], [1, 5], [2, 4], [2, 5], [3, 4], [3, 5]]\n  //.\n  //. > traverse(Identity, x => Identity(x + 1), [1, 2, 3])\n  //. Identity([2, 3, 4])\n  //. ```\n  function traverse(typeRep, f, traversable) {\n    return Traversable.methods.traverse(traversable)(typeRep, f);\n  }\n\n  //# sequence :: (Applicative f, Traversable t) => (TypeRep f, t (f a)) -> f (t a)\n  //.\n  //. Inverts the given `t (f a)` to produce an `f (t a)`.\n  //.\n  //. This function is derived from [`traverse`](#traverse).\n  //.\n  //. ```javascript\n  //. > sequence(Array, Identity([1, 2, 3]))\n  //. [Identity(1), Identity(2), Identity(3)]\n  //.\n  //. > sequence(Identity, [Identity(1), Identity(2), Identity(3)])\n  //. Identity([1, 2, 3])\n  //. ```\n  function sequence(typeRep, traversable) {\n    return traverse(typeRep, identity, traversable);\n  }\n\n  //# extend :: Extend w => (w a -> b, w a) -> w b\n  //.\n  //. Function wrapper for [`fantasy-land/extend`][].\n  //.\n  //. `fantasy-land/extend` implementations are provided for the following\n  //. built-in types: Array and Function.\n  //.\n  //. ```javascript\n  //. > extend(ss => ss.join(''), ['x', 'y', 'z'])\n  //. ['xyz', 'yz', 'z']\n  //.\n  //. > extend(f => f([3, 4]), reverse)([1, 2])\n  //. [4, 3, 2, 1]\n  //. ```\n  function extend(f, extend_) {\n    return Extend.methods.extend(extend_)(f);\n  }\n\n  //# duplicate :: Extend w => w a -> w (w a)\n  //.\n  //. Adds one level of nesting to a comonadic structure.\n  //.\n  //. This function is derived from [`extend`](#extend).\n  //.\n  //. ```javascript\n  //. > duplicate(Identity(1))\n  //. Identity(Identity(1))\n  //.\n  //. > duplicate([1])\n  //. [[1]]\n  //.\n  //. > duplicate([1, 2, 3])\n  //. [[1, 2, 3], [2, 3], [3]]\n  //.\n  //. > duplicate(reverse)([1, 2])([3, 4])\n  //. [4, 3, 2, 1]\n  //. ```\n  function duplicate(extend_) {\n    return extend(identity, extend_);\n  }\n\n  //# extract :: Comonad w => w a -> a\n  //.\n  //. Function wrapper for [`fantasy-land/extract`][].\n  //.\n  //. ```javascript\n  //. > extract(Identity(42))\n  //. 42\n  //. ```\n  function extract(comonad) {\n    return Comonad.methods.extract(comonad)();\n  }\n\n  //# contramap :: Contravariant f => (b -> a, f a) -> f b\n  //.\n  //. Function wrapper for [`fantasy-land/contramap`][].\n  //.\n  //. `fantasy-land/contramap` implementations are provided for the following\n  //. built-in types: Function.\n  //.\n  //. ```javascript\n  //. > contramap(s => s.length, Math.sqrt)('Sanctuary')\n  //. 3\n  //. ```\n  function contramap(f, contravariant) {\n    return Contravariant.methods.contramap(contravariant)(f);\n  }\n\n  return {\n    TypeClass: TypeClass,\n    Setoid: Setoid,\n    Ord: Ord,\n    Semigroupoid: Semigroupoid,\n    Category: Category,\n    Semigroup: Semigroup,\n    Monoid: Monoid,\n    Group: Group,\n    Filterable: Filterable,\n    Functor: Functor,\n    Bifunctor: Bifunctor,\n    Profunctor: Profunctor,\n    Apply: Apply,\n    Applicative: Applicative,\n    Chain: Chain,\n    ChainRec: ChainRec,\n    Monad: Monad,\n    Alt: Alt,\n    Plus: Plus,\n    Alternative: Alternative,\n    Foldable: Foldable,\n    Traversable: Traversable,\n    Extend: Extend,\n    Comonad: Comonad,\n    Contravariant: Contravariant,\n    toString: toString,\n    equals: equals,\n    lt: lt,\n    lte: lte,\n    gt: gt,\n    gte: gte,\n    min: min,\n    max: max,\n    compose: compose,\n    id: id,\n    concat: concat,\n    empty: empty,\n    invert: invert,\n    filter: filter,\n    reject: reject,\n    map: map,\n    flip: flip,\n    bimap: bimap,\n    mapLeft: mapLeft,\n    promap: promap,\n    ap: ap,\n    lift2: lift2,\n    lift3: lift3,\n    apFirst: apFirst,\n    apSecond: apSecond,\n    of: of,\n    append: append,\n    prepend: prepend,\n    chain: chain,\n    join: join,\n    chainRec: chainRec,\n    alt: alt,\n    zero: zero,\n    reduce: reduce,\n    size: size,\n    elem: elem,\n    foldMap: foldMap,\n    reverse: reverse,\n    sort: sort,\n    sortBy: sortBy,\n    takeWhile: takeWhile,\n    dropWhile: dropWhile,\n    traverse: traverse,\n    sequence: sequence,\n    extend: extend,\n    duplicate: duplicate,\n    extract: extract,\n    contramap: contramap\n  };\n\n}));\n\n//. [Alt]:                      v:fantasyland/fantasy-land#alt\n//. [Alternative]:              v:fantasyland/fantasy-land#alternative\n//. [Applicative]:              v:fantasyland/fantasy-land#applicative\n//. [Apply]:                    v:fantasyland/fantasy-land#apply\n//. [Bifunctor]:                v:fantasyland/fantasy-land#bifunctor\n//. [Category]:                 v:fantasyland/fantasy-land#category\n//. [Chain]:                    v:fantasyland/fantasy-land#chain\n//. [ChainRec]:                 v:fantasyland/fantasy-land#chainrec\n//. [Comonad]:                  v:fantasyland/fantasy-land#comonad\n//. [Contravariant]:            v:fantasyland/fantasy-land#contravariant\n//. [Extend]:                   v:fantasyland/fantasy-land#extend\n//. [FL]:                       v:fantasyland/fantasy-land\n//. [Filterable]:               v:fantasyland/fantasy-land#filterable\n//. [Foldable]:                 v:fantasyland/fantasy-land#foldable\n//. [Functor]:                  v:fantasyland/fantasy-land#functor\n//. [Group]:                    v:fantasyland/fantasy-land#group\n//. [Monad]:                    v:fantasyland/fantasy-land#monad\n//. [Monoid]:                   v:fantasyland/fantasy-land#monoid\n//. [Ord]:                      v:fantasyland/fantasy-land#ord\n//. [Plus]:                     v:fantasyland/fantasy-land#plus\n//. [Profunctor]:               v:fantasyland/fantasy-land#profunctor\n//. [Semigroup]:                v:fantasyland/fantasy-land#semigroup\n//. [Semigroupoid]:             v:fantasyland/fantasy-land#semigroupoid\n//. [Setoid]:                   v:fantasyland/fantasy-land#setoid\n//. [Traversable]:              v:fantasyland/fantasy-land#traversable\n//. [`fantasy-land/alt`]:       v:fantasyland/fantasy-land#alt-method\n//. [`fantasy-land/ap`]:        v:fantasyland/fantasy-land#ap-method\n//. [`fantasy-land/bimap`]:     v:fantasyland/fantasy-land#bimap-method\n//. [`fantasy-land/chain`]:     v:fantasyland/fantasy-land#chain-method\n//. [`fantasy-land/chainRec`]:  v:fantasyland/fantasy-land#chainrec-method\n//. [`fantasy-land/compose`]:   v:fantasyland/fantasy-land#compose-method\n//. [`fantasy-land/concat`]:    v:fantasyland/fantasy-land#concat-method\n//. [`fantasy-land/contramap`]: v:fantasyland/fantasy-land#contramap-method\n//. [`fantasy-land/empty`]:     v:fantasyland/fantasy-land#empty-method\n//. [`fantasy-land/equals`]:    v:fantasyland/fantasy-land#equals-method\n//. [`fantasy-land/extend`]:    v:fantasyland/fantasy-land#extend-method\n//. [`fantasy-land/extract`]:   v:fantasyland/fantasy-land#extract-method\n//. [`fantasy-land/filter`]:    v:fantasyland/fantasy-land#filter-method\n//. [`fantasy-land/id`]:        v:fantasyland/fantasy-land#id-method\n//. [`fantasy-land/invert`]:    v:fantasyland/fantasy-land#invert-method\n//. [`fantasy-land/lte`]:       v:fantasyland/fantasy-land#lte-method\n//. [`fantasy-land/map`]:       v:fantasyland/fantasy-land#map-method\n//. [`fantasy-land/of`]:        v:fantasyland/fantasy-land#of-method\n//. [`fantasy-land/promap`]:    v:fantasyland/fantasy-land#promap-method\n//. [`fantasy-land/reduce`]:    v:fantasyland/fantasy-land#reduce-method\n//. [`fantasy-land/traverse`]:  v:fantasyland/fantasy-land#traverse-method\n//. [`fantasy-land/zero`]:      v:fantasyland/fantasy-land#zero-method\n//. [stable sort]:              https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\n//. [type-classes]:             https://github.com/sanctuary-js/sanctuary-def#type-classes\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. This package specifies an [algorithm][3] for deriving a _type identifier_\n//. from any JavaScript value, and exports an implementation of the algorithm.\n//. Authors of algebraic data types may follow this specification in order to\n//. make their data types compatible with the algorithm.\n//.\n//. ### Algorithm\n//.\n//. 1.  Take any JavaScript value `x`.\n//.\n//. 2.  If `x` is `null` or `undefined`, go to step 6.\n//.\n//. 3.  If `x.constructor` evaluates to `null` or `undefined`, go to step 6.\n//.\n//. 4.  If `x.constructor.prototype === x`, go to step 6. This check prevents a\n//.     prototype object from being considered a member of its associated type.\n//.\n//. 5.  If `typeof x.constructor['@@type']` evaluates to `'string'`, return\n//.     the value of `x.constructor['@@type']`.\n//.\n//. 6.  Return the [`Object.prototype.toString`][2] representation of `x`\n//.     without the leading `'[object '` and trailing `']'`.\n//.\n//. ### Compatibility\n//.\n//. For an algebraic data type to be compatible with the [algorithm][3]:\n//.\n//.   - every member of the type must have a `constructor` property pointing\n//.     to an object known as the _type representative_;\n//.\n//.   - the type representative must have a `@@type` property; and\n//.\n//.   - the type representative's `@@type` property (the _type identifier_)\n//.     must be a string primitive, ideally `'<npm-package-name>/<type-name>'`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n//.\n//. ### Usage\n//.\n//. ```javascript\n//. var Identity = require('my-package').Identity;\n//. var type = require('sanctuary-type-identifiers');\n//.\n//. type(null);         // => 'Null'\n//. type(true);         // => 'Boolean'\n//. type([1, 2, 3]);    // => 'Array'\n//. type(Identity);     // => 'Function'\n//. type(Identity(0));  // => 'my-package/Identity'\n//. ```\n//.\n//.\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: #algorithm\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  type :: Any -> String\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  return type;\n\n}));\n","/*\n        @@@@@@@            @@@@@@@         @@\n      @@       @@        @@       @@      @@@\n    @@   @@@ @@  @@    @@   @@@ @@  @@   @@@@@@ @@   @@@  @@ @@@      @@@@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@   @@\n   @@  @@   @@@   @@  @@  @@   @@@   @@   @@@   @@   @@@  @@@   @@  @@@@@@@@\n   @@  @@   @@@  @@   @@  @@   @@@  @@    @@@   @@   @@@  @@@   @@  @@@\n    @@   @@@ @@@@@     @@   @@@ @@@@@      @@@    @@@ @@  @@@@@@      @@@@@\n      @@                 @@                           @@  @@\n        @@@@@@@            @@@@@@@               @@@@@    @@\n                                                          */\n//. # sanctuary-type-identifiers\n//.\n//. A type is a set of values. Boolean, for example, is the type comprising\n//. `true` and `false`. A value may be a member of multiple types (`42` is a\n//. member of Number, PositiveNumber, Integer, and many other types).\n//.\n//. In certain situations it is useful to divide JavaScript values into\n//. non-overlapping types. The language provides two constructs for this\n//. purpose: the [`typeof`][1] operator and [`Object.prototype.toString`][2].\n//. Each has pros and cons, but neither supports user-defined types.\n//.\n//. sanctuary-type-identifiers comprises:\n//.\n//.   - an npm and browser -compatible package for deriving the\n//.     _type identifier_ of a JavaScript value; and\n//.   - a specification which authors may follow to specify type\n//.     identifiers for their types.\n//.\n//. ### Specification\n//.\n//. For a type to be compatible with the algorithm:\n//.\n//.   - every member of the type MUST have a `constructor` property\n//.     pointing to an object known as the _type representative_;\n//.\n//.   - the type representative MUST have a `@@type` property\n//.     (the _type identifier_); and\n//.\n//.   - the type identifier MUST be a string primitive and SHOULD have\n//.     format `'<namespace>/<name>[@<version>]'`, where:\n//.\n//.       - `<namespace>` MUST consist of one or more characters, and\n//.         SHOULD equal the name of the npm package which defines the\n//.         type (including [scope][3] where appropriate);\n//.\n//.       - `<name>` MUST consist of one or more characters, and SHOULD\n//.         be the unique name of the type; and\n//.\n//.       - `<version>` MUST consist of one or more digits, and SHOULD\n//.         represent the version of the type.\n//.\n//. If the type identifier does not conform to the format specified above,\n//. it is assumed that the entire string represents the _name_ of the type;\n//. _namespace_ will be `null` and _version_ will be `0`.\n//.\n//. If the _version_ is not given, it is assumed to be `0`.\n//.\n//. For example:\n//.\n//. ```javascript\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   if (!(this instanceof Identity)) return new Identity(x);\n//.   this.value = x;\n//. }\n//.\n//. Identity['@@type'] = 'my-package/Identity';\n//. ```\n//.\n//. Note that by using a constructor function the `constructor` property is set\n//. implicitly for each value created. Constructor functions are convenient for\n//. this reason, but are not required. This definition is also valid:\n//.\n//. ```javascript\n//. //  IdentityTypeRep :: TypeRep Identity\n//. var IdentityTypeRep = {\n//.   '@@type': 'my-package/Identity'\n//. };\n//.\n//. //  Identity :: a -> Identity a\n//. function Identity(x) {\n//.   return {constructor: IdentityTypeRep, value: x};\n//. }\n//. ```\n\n(function(f) {\n\n  'use strict';\n\n  if (typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  } else if (typeof define === 'function' && define.amd != null) {\n    define([], f);\n  } else {\n    self.sanctuaryTypeIdentifiers = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  //  $$type :: String\n  var $$type = '@@type';\n\n  //  pattern :: RegExp\n  var pattern = new RegExp(\n    '^'\n  + '([\\\\s\\\\S]+)'   //  <namespace>\n  + '/'             //  SOLIDUS (U+002F)\n  + '([\\\\s\\\\S]+?)'  //  <name>\n  + '(?:'           //  optional non-capturing group {\n  +   '@'           //    COMMERCIAL AT (U+0040)\n  +   '([0-9]+)'    //    <version>\n  + ')?'            //  }\n  + '$'\n  );\n\n  //. ### Usage\n  //.\n  //. ```javascript\n  //. const type = require('sanctuary-type-identifiers');\n  //. ```\n  //.\n  //. ```javascript\n  //. > function Identity(x) {\n  //. .   if (!(this instanceof Identity)) return new Identity(x);\n  //. .   this.value = x;\n  //. . }\n  //. . Identity['@@type'] = 'my-package/Identity@1';\n  //.\n  //. > type.parse(type(Identity(0)))\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  //.\n  //. ### API\n  //.\n  //# type :: Any -> String\n  //.\n  //. Takes any value and returns a string which identifies its type. If the\n  //. value conforms to the [specification][4], the custom type identifier is\n  //. returned.\n  //.\n  //. ```javascript\n  //. > type(null)\n  //. 'Null'\n  //.\n  //. > type(true)\n  //. 'Boolean'\n  //.\n  //. > type(Identity(0))\n  //. 'my-package/Identity@1'\n  //. ```\n  function type(x) {\n    return x != null &&\n           x.constructor != null &&\n           x.constructor.prototype !== x &&\n           typeof x.constructor[$$type] === 'string' ?\n      x.constructor[$$type] :\n      Object.prototype.toString.call(x).slice('[object '.length, -']'.length);\n  }\n\n  //# type.parse :: String -> { namespace :: Nullable String, name :: String, version :: Number }\n  //.\n  //. Takes any string and parses it according to the [specification][4],\n  //. returning an object with `namespace`, `name`, and `version` fields.\n  //.\n  //. ```javascript\n  //. > type.parse('my-package/List@2')\n  //. {namespace: 'my-package', name: 'List', version: 2}\n  //.\n  //. > type.parse('nonsense!')\n  //. {namespace: null, name: 'nonsense!', version: 0}\n  //.\n  //. > type.parse(Identity['@@type'])\n  //. {namespace: 'my-package', name: 'Identity', version: 1}\n  //. ```\n  type.parse = function parse(s) {\n    var groups = pattern.exec(s);\n    return {\n      namespace: groups == null || groups[1] == null ? null : groups[1],\n      name:      groups == null                      ? s    : groups[2],\n      version:   groups == null || groups[3] == null ? 0    : Number(groups[3])\n    };\n  };\n\n  return type;\n\n}));\n\n//. [1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof\n//. [2]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\n//. [3]: https://docs.npmjs.com/misc/scope\n//. [4]: #specification\n","//Built-in constant from web api\r\nexport const MESSAGE = \"message\";\r\n\r\n/* \r\n * These are really just internal wrapped with the loader functions\r\n */\r\nexport enum WorkerLoaderCommand {\r\n    INIT, //Sent from IO when Worker JS is loaded\r\n    READY, //Sent from Worker when INIT is received (worker is ready)\r\n}\r\n\r\n/*\r\n * See where these are called in IO.ts and Worker.ts to make stuff happen\r\n */\r\n\r\nexport enum WorkerCommand {\r\n    TICK, //Sent from IO on frame tick - but only when not busy \r\n    RENDER, //Sent from Worker when work is finished processing \r\n}\r\n","import MyWorker = require('worker-loader!./Worker');\r\nimport { getCompileFlags, loadWorker} from \"utils/Utils\";\r\nimport {WorkerCommand, MESSAGE} from \"types/Worker-Types\";\r\nimport {render} from \"renderer/Renderer\";\r\n\r\nconst {buildMode, buildVersion, isProduction} = getCompileFlags();\r\nconsole.log(`%c Purescript Hello World ${buildVersion} (productionMode: ${isProduction})`, 'color: #4286f4; font-size: large; font-family: \"Comic Sans MS\", cursive, sans-serif');\r\n\r\n/*\r\n * Everything here is generic boilerplate... the details are in the imports\r\n */\r\n\r\nconst worker:Worker = new (MyWorker as any)();\r\n\r\n\r\nloadWorker(worker)\r\n    .fork(\r\n        console.error,\r\n        (worker) => {\r\n            let readyForUpdate = true; \r\n\r\n            worker.addEventListener(MESSAGE, (e:MessageEvent) => {\r\n                switch(e.data.cmd) {\r\n                    case WorkerCommand.RENDER: \r\n                        render(e.data.state);\r\n                        readyForUpdate = true;\r\n                }\r\n            });\r\n\r\n            const tick = (frameTs:number) => {\r\n                if(readyForUpdate) {\r\n                    readyForUpdate = false;\r\n                    worker.postMessage({\r\n                        cmd: WorkerCommand.TICK, \r\n                        frameTs\r\n                    });\r\n                }\r\n\r\n                requestAnimationFrame(tick);\r\n            }\r\n\r\n            requestAnimationFrame(tick);\r\n        }\r\n    );\r\n\r\n\r\n\r\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"83ce16682fe81b23eda3.worker.js\");\n};","\r\nexport const getCompileFlags = () => {\r\n    const buildMode = process.env['NODE_ENV'];\r\n    const buildVersion =  process.env['BUILD_VERSION'];\r\n    const isProduction = buildMode === \"production\" ? true : false;\r\n\r\n    return {buildMode, buildVersion, isProduction}\r\n}\r\n","import {Future} from \"fluture\";\r\nimport {WorkerLoaderCommand, MESSAGE} from \"types/Worker-Types\";\r\n\r\n\r\n/*\r\n * these loaders resolve _after_ communication is established\r\n */\r\n//Loaded by main thread \r\nexport const loadWorker = (worker:any) => Future<any, Worker>((reject, resolve) => {\r\n    const onInitial = (e: MessageEvent) => {\r\n        if(e.data.cmd === WorkerLoaderCommand.READY) {\r\n            worker.removeEventListener(MESSAGE, onInitial);\r\n            resolve(worker);\r\n        }\r\n    }\r\n    worker.addEventListener(MESSAGE, onInitial);\r\n\r\n    worker.postMessage({ cmd: WorkerLoaderCommand.INIT});\r\n});\r\n\r\n//Loaded by worker thread\r\nexport const initWorker = () => Future<any, any>((reject, resolve) => {\r\n\r\n    const onInitial = (e: MessageEvent) => {\r\n\r\n        if(e.data.cmd === WorkerLoaderCommand.INIT) {\r\n            (self as any).removeEventListener(MESSAGE, onInitial);\r\n            (self as any).postMessage({cmd: WorkerLoaderCommand.READY});\r\n            resolve(self);\r\n        }\r\n    }\r\n    (self as any).addEventListener(MESSAGE, onInitial);\r\n});\r\n\r\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('sanctuary-type-classes'), require('inspect-f'), require('sanctuary-type-identifiers'), require('denque'), require('concurrify')) :\n\ttypeof define === 'function' && define.amd ? define(['sanctuary-type-classes', 'inspect-f', 'sanctuary-type-identifiers', 'denque', 'concurrify'], factory) :\n\t(global.Fluture = factory(global.sanctuaryTypeClasses,global.inspectf,global.sanctuaryTypeIdentifiers,global.Denque,global.concurrify));\n}(this, (function (Z,inspectf,type,Denque,concurrify) { 'use strict';\n\nZ = Z && Z.hasOwnProperty('default') ? Z['default'] : Z;\ninspectf = inspectf && inspectf.hasOwnProperty('default') ? inspectf['default'] : inspectf;\ntype = type && type.hasOwnProperty('default') ? type['default'] : type;\nDenque = Denque && Denque.hasOwnProperty('default') ? Denque['default'] : Denque;\nconcurrify = concurrify && concurrify.hasOwnProperty('default') ? concurrify['default'] : concurrify;\n\n/* istanbul ignore file: environment-specific */\n\n/* eslint-disable no-undef */\nconst scope = typeof self === 'object' ? self :\n                     typeof global === 'object' ? global :\n                     typeof window === 'object' ? window :\n                     {};\n/* eslint-enable no-undef */\n\nconst setImmediate = typeof scope.setImmediate === 'function' ?\n                            scope.setImmediate :\n                            function setImmediate(f, x){ return setTimeout(f, 0, x) };\n\nfunction noop(){}\nfunction moop(){ return this }\nvar show = Z.toString;\nfunction padf(sf, s){ return s.replace(/^/gm, sf).replace(sf, '') }\nfunction showf(f){ return padf('  ', inspectf(2, f)) }\n\nfunction mapArray(xs, f){\n  var l = xs.length, ys = new Array(l);\n  for(var i = 0; i < l; i++) ys[i] = f(xs[i], i, xs);\n  return ys;\n}\n\nfunction partial1(f, a){\n  return function bound1(b, c, d){\n    switch(arguments.length){\n      case 1: return f(a, b);\n      case 2: return f(a, b, c);\n      default: return f(a, b, c, d);\n    }\n  };\n}\n\nfunction partial2(f, a, b){\n  return function bound2(c, d){\n    return arguments.length === 1 ? f(a, b, c) : f(a, b, c, d);\n  };\n}\n\nfunction partial3(f, a, b, c){\n  return function bound3(d){\n    return f(a, b, c, d);\n  };\n}\n\nfunction immediately(f){\n  return function immediate(x){ return setImmediate(f, x) };\n}\n\nvar FL = {\n  map: 'fantasy-land/map',\n  bimap: 'fantasy-land/bimap',\n  chain: 'fantasy-land/chain',\n  chainRec: 'fantasy-land/chainRec',\n  ap: 'fantasy-land/ap',\n  of: 'fantasy-land/of',\n  zero: 'fantasy-land/zero'\n};\n\nvar ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\nvar namespace = 'fluture';\nvar name = 'Future';\nvar version = 3;\n\nvar $$type = namespace + '/' + name + '@' + version;\n\nfunction error(message){\n  throw new Error(message);\n}\n\nfunction typeError(message){\n  throw new TypeError(message);\n}\n\nfunction invalidArgument(it, at, expected, actual){\n  typeError(\n    it + ' expects its ' + ordinal[at] + ' argument to ' + expected + '\\n  Actual: ' + show(actual)\n  );\n}\n\nfunction invalidContext(it, actual){\n  typeError(\n    it + ' was invoked outside the context of a Future. You might want to use'\n  + ' a dispatcher instead\\n  Called on: ' + (show(actual))\n  );\n}\n\nfunction invalidNamespace(m, x){\n  return (\n    'The Future was not created by ' + namespace + '. '\n  + 'Make sure you transform other Futures to ' + namespace + ' Futures. '\n  + 'Got ' + (x ? ('a Future from ' + x) : 'an unscoped Future') + '.'\n  + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n  );\n}\n\nfunction invalidVersion(m, x){\n  return (\n    'The Future was created by ' + (x < version ? 'an older' : 'a newer')\n  + ' version of ' + namespace + '. '\n  + 'This means that one of the sources which creates Futures is outdated. '\n  + 'Update this source, or transform its created Futures to be compatible.'\n  + '\\n  See: https://github.com/fluture-js/Fluture#casting-futures'\n  );\n}\n\nfunction invalidFuture(it, at, m, s){\n  var id = type.parse(type(m));\n  var info = id.name === name ? '\\n' + (\n    id.namespace !== namespace ? invalidNamespace(m, id.namespace)\n  : id.version !== version ? invalidVersion(m, id.version)\n  : 'Nothing seems wrong. Contact the Fluture maintainers.') : '';\n  typeError(\n    it + ' expects ' + (ordinal[at] ? 'its ' + ordinal[at] + ' argument to be a valid Future' : at)\n  + '.' + info + '\\n  Actual: ' + (show(m)) + ' :: ' + (id.name) + (s || '')\n  );\n}\n\nfunction isFunction(f){\n  return typeof f === 'function';\n}\n\nfunction isThenable(m){\n  return m instanceof Promise || Boolean(m) && isFunction(m.then);\n}\n\nfunction isBoolean(f){\n  return typeof f === 'boolean';\n}\n\nfunction isNumber(f){\n  return typeof f === 'number';\n}\n\nfunction isUnsigned(n){\n  return (n === Infinity || isNumber(n) && n > 0 && n % 1 === 0);\n}\n\nfunction isObject(o){\n  return o !== null && typeof o === 'object';\n}\n\nfunction isIterator(i){\n  return isObject(i) && isFunction(i.next);\n}\n\nfunction isArray(x){\n  return Array.isArray(x);\n}\n\n/*eslint no-cond-assign:0, no-constant-condition:0 */\n\nfunction interpreter(rej, res){\n\n  //This is the primary queue of actions. All actions in here will be \"cold\",\n  //meaning they haven't had the chance yet to run concurrent computations.\n  var cold = new Denque(this._actions.size);\n\n  //This is the secondary queue of actions. All actions in here will be \"hot\",\n  //meaning they have already had a chance to run a concurrent computation.\n  var queue = new Denque(this._actions.size);\n\n  //These combined variables define our current state.\n  // future  = the future we are currently forking\n  // action  = the action to be informed when the future settles\n  // cancel  = the cancel function of the current future\n  // settled = a boolean indicating whether a new tick should start\n  // async   = a boolean indicating whether we are awaiting a result asynchronously\n  var future, action, cancel = noop, settled, async = true, it;\n\n  //This function is called with a future to use in the next tick.\n  //Here we \"flatten\" the actions of another Sequence into our own actions,\n  //this is the magic that allows for infinitely stack safe recursion because\n  //actions like ChainAction will return a new Sequence.\n  //If we settled asynchronously, we call drain() directly to run the next tick.\n  function settle(m){\n    settled = true;\n    future = m;\n\n    if(future._spawn){\n      var tail = future._actions;\n\n      while(!tail.isEmpty){\n        cold.unshift(tail.head);\n        tail = tail.tail;\n      }\n\n      future = future._spawn;\n    }\n\n    if(async) drain();\n  }\n\n  //This function serves as a rejection handler for our current future.\n  //It will tell the current action that the future rejected, and it will\n  //settle the current tick with the action's answer to that.\n  function rejected(x){\n    settle(action.rejected(x));\n  }\n\n  //This function serves as a resolution handler for our current future.\n  //It will tell the current action that the future resolved, and it will\n  //settle the current tick with the action's answer to that.\n  function resolved(x){\n    settle(action.resolved(x));\n  }\n\n  //This function is passed into actions when they are \"warmed up\".\n  //If the action decides that it has its result, without the need to await\n  //anything else, then it can call this function to force \"early termination\".\n  //When early termination occurs, all actions which were queued prior to the\n  //terminator will be skipped. If they were already hot, they will also receive\n  //a cancel signal so they can cancel their own concurrent computations, as\n  //their results are no longer needed.\n  function early(m, terminator){\n    cancel();\n    cold.clear();\n\n    if(async && action !== terminator){\n      action.cancel();\n      while((it = queue.shift()) && it !== terminator) it.cancel();\n    }\n\n    settle(m);\n  }\n\n  //This function serves to kickstart concurrent computations.\n  //Takes all actions from the cold queue *back-to-front*, and calls run() on\n  //each of them, passing them the \"early\" function. If any of them settles (by\n  //calling early()), we abort. After warming up all actions in the cold queue,\n  //we warm up the current action as well.\n  function warmupActions(){\n    while(it = cold.pop()){\n      it = it.run(early);\n      if(settled) return;\n      queue.unshift(it);\n    }\n\n    action = action.run(early);\n  }\n\n  //This function represents our main execution loop.\n  //When we refer to a \"tick\", we mean the execution of the body inside the\n  //primary while-loop of this function.\n  //Every tick follows the following algorithm:\n  // 1. We try to take an action from the cold queue, if we fail, go to step 2.\n  //      1a. We fork the future.\n  //      1b. We warmupActions() if the we haven't settled yet.\n  // 2. We try to take an action from the hot queue, if we fail, go to step 3.\n  //      2a. We fork the Future, if settles, we continue to the next tick.\n  // 3. If we couldn't take actions from either queues, we fork the Future into\n  //    the user provided continuations. This is the end of the interpretation.\n  // 4. If we did take an action from one of queues, but none of the steps\n  //    caused a settle(), it means we are asynchronously waiting for something\n  //    to settle and start the next tick, so we return from the function.\n  function drain(){\n    async = false;\n\n    while(true){\n      settled = false;\n      if(action = cold.shift()){\n        cancel = future._fork(rejected, resolved);\n        if(!settled) warmupActions();\n      }else if(action = queue.shift()){\n        cancel = future._fork(rejected, resolved);\n      }else break;\n      if(settled) continue;\n      async = true;\n      return;\n    }\n\n    cancel = future._fork(rej, res);\n  }\n\n  //Start the execution loop.\n  settle(this);\n\n  //Return a cancellation function. It will cancel the current Future, the\n  //current action, and all queued hot actions.\n  return function Sequence$cancel(){\n    cancel();\n    action && action.cancel();\n    while(it = queue.shift()) it.cancel();\n  };\n\n}\n\nvar empty = ({isEmpty: true, size: 0, head: null, tail: null});\n\nfunction cons(head, tail){\n  return {isEmpty: false, size: tail.size + 1, head: head, tail: tail};\n}\n\nfunction throwRejection(x){\n  error('Future#value was called on a rejected Future\\n  Actual: Future.reject(' + show(x) + ')');\n}\n\nfunction Future(computation){\n  if(!isFunction(computation)) invalidArgument('Future', 0, 'be a Function', computation);\n  return new Computation(computation);\n}\n\nfunction isFuture(x){\n  return x instanceof Future || type(x) === $$type;\n}\n\nFuture['@@type'] = $$type;\n\nFuture.prototype[FL.ap] = function Future$FL$ap(other){\n  return other._ap(this);\n};\n\nFuture.prototype[FL.map] = function Future$FL$map(mapper){\n  return this._map(mapper);\n};\n\nFuture.prototype[FL.bimap] = function Future$FL$bimap(lmapper, rmapper){\n  return this._bimap(lmapper, rmapper);\n};\n\nFuture.prototype[FL.chain] = function Future$FL$chain(mapper){\n  return this._chain(mapper);\n};\n\nFuture.prototype.ap = function Future$ap(other){\n  if(!isFuture(this)) invalidContext('Future#ap', this);\n  if(!isFuture(other)) invalidFuture('Future#ap', 0, other);\n  return this._ap(other);\n};\n\nFuture.prototype.map = function Future$map(mapper){\n  if(!isFuture(this)) invalidContext('Future#map', this);\n  if(!isFunction(mapper)) invalidArgument('Future#map', 0, 'to be a Function', mapper);\n  return this._map(mapper);\n};\n\nFuture.prototype.bimap = function Future$bimap(lmapper, rmapper){\n  if(!isFuture(this)) invalidContext('Future#bimap', this);\n  if(!isFunction(lmapper)) invalidArgument('Future#bimap', 0, 'to be a Function', lmapper);\n  if(!isFunction(rmapper)) invalidArgument('Future#bimap', 1, 'to be a Function', rmapper);\n  return this._bimap(lmapper, rmapper);\n};\n\nFuture.prototype.chain = function Future$chain(mapper){\n  if(!isFuture(this)) invalidContext('Future#chain', this);\n  if(!isFunction(mapper)) invalidArgument('Future#chain', 0, 'to be a Function', mapper);\n  return this._chain(mapper);\n};\n\nFuture.prototype.mapRej = function Future$mapRej(mapper){\n  if(!isFuture(this)) invalidContext('Future#mapRej', this);\n  if(!isFunction(mapper)) invalidArgument('Future#mapRej', 0, 'to be a Function', mapper);\n  return this._mapRej(mapper);\n};\n\nFuture.prototype.chainRej = function Future$chainRej(mapper){\n  if(!isFuture(this)) invalidContext('Future#chainRej', this);\n  if(!isFunction(mapper)) invalidArgument('Future#chainRej', 0, 'to be a Function', mapper);\n  return this._chainRej(mapper);\n};\n\nFuture.prototype.race = function Future$race(other){\n  if(!isFuture(this)) invalidContext('Future#race', this);\n  if(!isFuture(other)) invalidFuture('Future#race', 0, other);\n  return this._race(other);\n};\n\nFuture.prototype.both = function Future$both(other){\n  if(!isFuture(this)) invalidContext('Future#both', this);\n  if(!isFuture(other)) invalidFuture('Future#both', 0, other);\n  return this._both(other);\n};\n\nFuture.prototype.and = function Future$and(other){\n  if(!isFuture(this)) invalidContext('Future#and', this);\n  if(!isFuture(other)) invalidFuture('Future#and', 0, other);\n  return this._and(other);\n};\n\nFuture.prototype.or = function Future$or(other){\n  if(!isFuture(this)) invalidContext('Future#or', this);\n  if(!isFuture(other)) invalidFuture('Future#or', 0, other);\n  return this._or(other);\n};\n\nFuture.prototype.swap = function Future$swap(){\n  if(!isFuture(this)) invalidContext('Future#ap', this);\n  return this._swap();\n};\n\nFuture.prototype.fold = function Future$fold(lmapper, rmapper){\n  if(!isFuture(this)) invalidContext('Future#ap', this);\n  if(!isFunction(lmapper)) invalidArgument('Future#fold', 0, 'to be a Function', lmapper);\n  if(!isFunction(rmapper)) invalidArgument('Future#fold', 1, 'to be a Function', rmapper);\n  return this._fold(lmapper, rmapper);\n};\n\nFuture.prototype.finally = function Future$finally(other){\n  if(!isFuture(this)) invalidContext('Future#finally', this);\n  if(!isFuture(other)) invalidFuture('Future#finally', 0, other);\n  return this._finally(other);\n};\n\nFuture.prototype.lastly = function Future$lastly(other){\n  if(!isFuture(this)) invalidContext('Future#lastly', this);\n  if(!isFuture(other)) invalidFuture('Future#lastly', 0, other);\n  return this._finally(other);\n};\n\nFuture.prototype.fork = function Future$fork(rej, res){\n  if(!isFuture(this)) invalidContext('Future#fork', this);\n  if(!isFunction(rej)) invalidArgument('Future#fork', 0, 'to be a Function', rej);\n  if(!isFunction(res)) invalidArgument('Future#fork', 0, 'to be a Function', res);\n  return this._fork(rej, res);\n};\n\nFuture.prototype.value = function Future$value(res){\n  if(!isFuture(this)) invalidContext('Future#value', this);\n  if(!isFunction(res)) invalidArgument('Future#value', 0, 'to be a Function', res);\n  return this._fork(throwRejection, res);\n};\n\nFuture.prototype.done = function Future$done(callback){\n  if(!isFuture(this)) invalidContext('Future#done', this);\n  if(!isFunction(callback)) invalidArgument('Future#done', 0, 'to be a Function', callback);\n  return this._fork(function Future$done$rej(x){ callback(x); },\n                    function Future$done$res(x){ callback(null, x); });\n};\n\nFuture.prototype.promise = function Future$promise(){\n  var _this = this;\n  return new Promise(function Future$promise$computation(res, rej){\n    _this._fork(rej, res);\n  });\n};\n\nFuture.prototype.isRejected = function Future$isRejected(){\n  return false;\n};\n\nFuture.prototype.isResolved = function Future$isResolved(){\n  return false;\n};\n\nFuture.prototype.isSettled = function Future$isSettled(){\n  return this.isRejected() || this.isResolved();\n};\n\nFuture.prototype.extractLeft = function Future$extractLeft(){\n  return [];\n};\n\nFuture.prototype.extractRight = function Future$extractRight(){\n  return [];\n};\n\nvar Core = Object.create(Future.prototype);\n\nCore._ap = function Core$ap(other){\n  return new Sequence(this)._ap(other);\n};\n\nCore._map = function Core$map(mapper){\n  return new Sequence(this)._map(mapper);\n};\n\nCore._bimap = function Core$bimap(lmapper, rmapper){\n  return new Sequence(this)._bimap(lmapper, rmapper);\n};\n\nCore._chain = function Core$chain(mapper){\n  return new Sequence(this)._chain(mapper);\n};\n\nCore._mapRej = function Core$mapRej(mapper){\n  return new Sequence(this)._mapRej(mapper);\n};\n\nCore._chainRej = function Core$chainRej(mapper){\n  return new Sequence(this)._chainRej(mapper);\n};\n\nCore._race = function Core$race(other){\n  return new Sequence(this)._race(other);\n};\n\nCore._both = function Core$both(other){\n  return new Sequence(this)._both(other);\n};\n\nCore._and = function Core$and(other){\n  return new Sequence(this)._and(other);\n};\n\nCore._or = function Core$or(other){\n  return new Sequence(this)._or(other);\n};\n\nCore._swap = function Core$swap(){\n  return new Sequence(this)._swap();\n};\n\nCore._fold = function Core$fold(lmapper, rmapper){\n  return new Sequence(this)._fold(lmapper, rmapper);\n};\n\nCore._finally = function Core$finally(other){\n  return new Sequence(this)._finally(other);\n};\n\nfunction check$fork(f, c){\n  if(!(f === undefined || (isFunction(f) && f.length === 0))) typeError(\n    'Future expected its computation to return a nullary function or void'\n    + '\\n  Actual: ' + show(f) + '\\n  From calling: ' + showf(c)\n  );\n}\n\nfunction Computation(computation){\n  this._computation = computation;\n}\n\nComputation.prototype = Object.create(Core);\n\nComputation.prototype._fork = function Computation$_fork(rej, res){\n  var open = true;\n  var cancel = this._computation(function Computation$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }, function Computation$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  });\n  check$fork(cancel, this._computation);\n\n  return function Computation$cancel(){\n    if(open){\n      open = false;\n      cancel && cancel();\n    }\n  };\n};\n\nComputation.prototype.toString = function Computation$toString(){\n  return 'Future(' + showf(this._computation) + ')';\n};\n\nfunction Rejected(value){\n  this._value = value;\n}\n\nRejected.prototype = Object.create(Core);\n\nRejected.prototype._ap = moop;\nRejected.prototype._map = moop;\nRejected.prototype._chain = moop;\nRejected.prototype._race = moop;\nRejected.prototype._both = moop;\nRejected.prototype._and = moop;\n\nRejected.prototype._or = function Rejected$or(other){\n  return other;\n};\n\nRejected.prototype._finally = function Rejected$finally(other){\n  return other._and(this);\n};\n\nRejected.prototype._swap = function Rejected$swap(){\n  return new Resolved(this._value);\n};\n\nRejected.prototype._fork = function Rejected$_fork(rej){\n  rej(this._value);\n  return noop;\n};\n\nRejected.prototype.isRejected = function Rejected$isRejected(){\n  return true;\n};\n\nRejected.prototype.extractLeft = function Rejected$extractLeft(){\n  return [this._value];\n};\n\nRejected.prototype.toString = function Rejected$toString(){\n  return 'Future.reject(' + show(this._value) + ')';\n};\n\nfunction reject(x){\n  return new Rejected(x);\n}\n\nfunction Resolved(value){\n  this._value = value;\n}\n\nResolved.prototype = Object.create(Core);\n\nResolved.prototype._race = moop;\nResolved.prototype._mapRej = moop;\nResolved.prototype._or = moop;\n\nResolved.prototype._and = function Resolved$and(other){\n  return other;\n};\n\nResolved.prototype._both = function Resolved$both(other){\n  var left = this._value;\n  return other._map(function Resolved$both$mapper(right){\n    return [left, right];\n  });\n};\n\nResolved.prototype._swap = function Resolved$swap(){\n  return new Rejected(this._value);\n};\n\nResolved.prototype._finally = function Resolved$finally(other){\n  var value = this._value;\n  return other._map(function Resolved$finally$mapper(){\n    return value;\n  });\n};\n\nResolved.prototype._fork = function _fork(rej, res){\n  res(this._value);\n  return noop;\n};\n\nResolved.prototype.isResolved = function Resolved$isResolved(){\n  return true;\n};\n\nResolved.prototype.extractRight = function Resolved$extractRight(){\n  return [this._value];\n};\n\nResolved.prototype.toString = function Resolved$toString(){\n  return 'Future.of(' + show(this._value) + ')';\n};\n\nfunction of(x){\n  return new Resolved(x);\n}\n\nfunction Never(){\n  this._isNever = true;\n}\n\nNever.prototype = Object.create(Future.prototype);\n\nNever.prototype._ap = moop;\nNever.prototype._map = moop;\nNever.prototype._bimap = moop;\nNever.prototype._chain = moop;\nNever.prototype._mapRej = moop;\nNever.prototype._chainRej = moop;\nNever.prototype._both = moop;\nNever.prototype._or = moop;\nNever.prototype._swap = moop;\nNever.prototype._fold = moop;\nNever.prototype._finally = moop;\n\nNever.prototype._race = function Never$race(other){\n  return other;\n};\n\nNever.prototype._fork = function Never$_fork(){\n  return noop;\n};\n\nNever.prototype.toString = function Never$toString(){\n  return 'Future.never';\n};\n\nvar never = new Never();\n\nfunction isNever(x){\n  return isFuture(x) && x._isNever === true;\n}\n\nfunction Eager(future){\n  var _this = this;\n  _this.rej = noop;\n  _this.res = noop;\n  _this.rejected = false;\n  _this.resolved = false;\n  _this.value = null;\n  _this.cancel = future._fork(function Eager$reject(x){\n    _this.value = x;\n    _this.rejected = true;\n    _this.cancel = noop;\n    _this.rej(x);\n  }, function Eager$resolve(x){\n    _this.value = x;\n    _this.resolved = true;\n    _this.cancel = noop;\n    _this.res(x);\n  });\n}\n\nEager.prototype = Object.create(Core);\n\nEager.prototype._fork = function Eager$_fork(rej, res){\n  if(this.rejected) rej(this.value);\n  else if(this.resolved) res(this.value);\n  else{\n    this.rej = rej;\n    this.res = res;\n  }\n  return this.cancel;\n};\n\nfunction check$ap(f){\n  return isFunction(f) ? f : typeError(\n    'Future#ap expects its first argument to be a Future of a Function'\n    + '\\n  Actual: Future.of(' + show(f) + ')'\n  );\n}\n\nfunction check$chain(m, f, x){\n  return isFuture(m) ? m : invalidFuture(\n    'Future#chain',\n    'the function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nfunction check$chainRej(m, f, x){\n  return isFuture(m) ? m : invalidFuture(\n    'Future#chainRej',\n    'the function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nvar Action = {\n  rejected: function Action$rejected(x){ this.cancel(); return new Rejected(x) },\n  resolved: function Action$resolved(x){ this.cancel(); return new Resolved(x) },\n  run: function Action$run(){ return this },\n  cancel: function Action$cancel(){}\n};\n\nfunction ApAction(other){ this.other = other; }\nApAction.prototype = Object.create(Action);\n\nApAction.prototype.resolved = function ApAction$resolved(f){\n  check$ap(f);\n  return this.other._map(function ApAction$resolved$mapper(x){ return f(x) });\n};\n\nApAction.prototype.toString = function ApAction$toString(){\n  return 'ap(' + this.other.toString() + ')';\n};\n\nfunction MapAction(mapper){ this.mapper = mapper; }\nMapAction.prototype = Object.create(Action);\n\nMapAction.prototype.resolved = function MapAction$resolved(x){\n  return new Resolved(this.mapper(x));\n};\n\nMapAction.prototype.toString = function MapAction$toString(){\n  return 'map(' + showf(this.mapper) + ')';\n};\n\nfunction BimapAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\nBimapAction.prototype = Object.create(Action);\n\nBimapAction.prototype.rejected = function BimapAction$rejected(x){\n  return new Rejected(this.lmapper(x));\n};\n\nBimapAction.prototype.resolved = function BimapAction$resolved(x){\n  return new Resolved(this.rmapper(x));\n};\n\nBimapAction.prototype.toString = function BimapAction$toString(){\n  return 'bimap(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n};\n\nfunction ChainAction(mapper){ this.mapper = mapper; }\nChainAction.prototype = Object.create(Action);\n\nChainAction.prototype.resolved = function ChainAction$resolved(x){\n  return check$chain(this.mapper(x), this.mapper, x);\n};\n\nChainAction.prototype.toString = function ChainAction$toString(){\n  return 'chain(' + showf(this.mapper) + ')';\n};\n\nfunction MapRejAction(mapper){ this.mapper = mapper; }\nMapRejAction.prototype = Object.create(Action);\n\nMapRejAction.prototype.rejected = function MapRejAction$rejected(x){\n  return new Rejected(this.mapper(x));\n};\n\nMapRejAction.prototype.toString = function MapRejAction$toString(){\n  return 'mapRej(' + showf(this.mapper) + ')';\n};\n\nfunction ChainRejAction(mapper){ this.mapper = mapper; }\nChainRejAction.prototype = Object.create(Action);\n\nChainRejAction.prototype.rejected = function ChainRejAction$rejected(x){\n  return check$chainRej(this.mapper(x), this.mapper, x);\n};\n\nChainRejAction.prototype.toString = function ChainRejAction$toString(){\n  return 'chainRej(' + showf(this.mapper) + ')';\n};\n\nfunction SwapAction(){}\nSwapAction.prototype = Object.create(Action);\n\nSwapAction.prototype.rejected = function SwapAction$rejected(x){\n  return new Resolved(x);\n};\n\nSwapAction.prototype.resolved = function SwapAction$resolved(x){\n  return new Rejected(x);\n};\n\nSwapAction.prototype.toString = function SwapAction$toString(){\n  return 'swap()';\n};\n\nfunction FoldAction(lmapper, rmapper){ this.lmapper = lmapper; this.rmapper = rmapper; }\nFoldAction.prototype = Object.create(Action);\n\nFoldAction.prototype.rejected = function FoldAction$rejected(x){\n  return new Resolved(this.lmapper(x));\n};\n\nFoldAction.prototype.resolved = function FoldAction$resolved(x){\n  return new Resolved(this.rmapper(x));\n};\n\nFoldAction.prototype.toString = function FoldAction$toString(){\n  return 'fold(' + showf(this.lmapper) + ', ' + showf(this.rmapper) + ')';\n};\n\nfunction FinallyAction(other){ this.other = other; }\nFinallyAction.prototype = Object.create(Action);\n\nFinallyAction.prototype.rejected = function FinallyAction$rejected(x){\n  return this.other._and(new Rejected(x));\n};\n\nFinallyAction.prototype.resolved = function FinallyAction$resolved(x){\n  return this.other._map(function FoldAction$resolved$mapper(){ return x });\n};\n\nFinallyAction.prototype.cancel = function FinallyAction$cancel(){\n  this.other._fork(noop, noop)();\n};\n\nFinallyAction.prototype.toString = function FinallyAction$toString(){\n  return 'finally(' + this.other.toString() + ')';\n};\n\nfunction AndAction(other){ this.other = other; }\nAndAction.prototype = Object.create(Action);\n\nAndAction.prototype.resolved = function AndAction$resolved(){\n  return this.other;\n};\n\nAndAction.prototype.toString = function AndAction$toString(){\n  return 'and(' + this.other.toString() + ')';\n};\n\nfunction OrAction(other){ this.other = other; }\nOrAction.prototype = Object.create(Action);\n\nOrAction.prototype.rejected = function OrAction$rejected(){\n  return this.other;\n};\n\nOrAction.prototype.toString = function OrAction$toString(){\n  return 'or(' + this.other.toString() + ')';\n};\n\nfunction RaceAction(other){ this.other = other; }\nRaceAction.prototype = Object.create(Action);\n\nRaceAction.prototype.run = function RaceAction$run(early){\n  return new RaceActionState(early, new Eager(this.other));\n};\n\nRaceAction.prototype.toString = function RaceAction$toString(){\n  return 'race(' + this.other.toString() + ')';\n};\n\nfunction BothAction(other){ this.other = other; }\nBothAction.prototype = Object.create(Action);\n\nBothAction.prototype.resolved = function BothAction$resolved(x){\n  return this.other._map(function BothAction$resolved$mapper(y){ return [x, y] });\n};\n\nBothAction.prototype.run = function BothAction$run(early){\n  return new BothActionState(early, new Eager(this.other));\n};\n\nBothAction.prototype.toString = function BothAction$toString(){\n  return 'both(' + this.other.toString() + ')';\n};\n\nfunction RaceActionState(early, other){\n  var _this = this;\n  _this.other = other;\n  _this.cancel = other._fork(\n    function RaceActionState$rej(x){ early(new Rejected(x), _this); },\n    function RaceActionState$res(x){ early(new Resolved(x), _this); }\n  );\n}\n\nRaceActionState.prototype = Object.create(RaceAction.prototype);\n\nfunction BothActionState(early, other){\n  var _this = this;\n  _this.other = other;\n  _this.cancel = other._fork(\n    function BothActionState$rej(x){ early(new Rejected(x), _this); },\n    noop\n  );\n}\n\nBothActionState.prototype = Object.create(BothAction.prototype);\n\nfunction Sequence(spawn, actions){\n  this._spawn = spawn;\n  this._actions = actions || empty;\n}\n\nSequence.prototype = Object.create(Future.prototype);\n\nSequence.prototype._transform = function Sequence$_transform(action){\n  return new Sequence(this._spawn, cons(action, this._actions));\n};\n\nSequence.prototype._ap = function Sequence$ap(other){\n  return this._transform(new ApAction(other));\n};\n\nSequence.prototype._map = function Sequence$map(mapper){\n  return this._transform(new MapAction(mapper));\n};\n\nSequence.prototype._bimap = function Sequence$bimap(lmapper, rmapper){\n  return this._transform(new BimapAction(lmapper, rmapper));\n};\n\nSequence.prototype._chain = function Sequence$chain(mapper){\n  return this._transform(new ChainAction(mapper));\n};\n\nSequence.prototype._mapRej = function Sequence$mapRej(mapper){\n  return this._transform(new MapRejAction(mapper));\n};\n\nSequence.prototype._chainRej = function Sequence$chainRej(mapper){\n  return this._transform(new ChainRejAction(mapper));\n};\n\nSequence.prototype._race = function Sequence$race(other){\n  return isNever(other) ? this : this._transform(new RaceAction(other));\n};\n\nSequence.prototype._both = function Sequence$both(other){\n  return this._transform(new BothAction(other));\n};\n\nSequence.prototype._and = function Sequence$and(other){\n  return this._transform(new AndAction(other));\n};\n\nSequence.prototype._or = function Sequence$or(other){\n  return this._transform(new OrAction(other));\n};\n\nSequence.prototype._swap = function Sequence$swap(){\n  return this._transform(new SwapAction);\n};\n\nSequence.prototype._fold = function Sequence$fold(lmapper, rmapper){\n  return this._transform(new FoldAction(lmapper, rmapper));\n};\n\nSequence.prototype._finally = function Sequence$finally(other){\n  return this._transform(new FinallyAction(other));\n};\n\nSequence.prototype._fork = interpreter;\n\nSequence.prototype.toString = function Sequence$toString(){\n  var str = '', tail = this._actions;\n\n  while(!tail.isEmpty){\n    str = '.' + tail.head.toString() + str;\n    tail = tail.tail;\n  }\n\n  return this._spawn.toString() + str;\n};\n\nfunction Next(x){\n  return {done: false, value: x};\n}\n\nfunction Done(x){\n  return {done: true, value: x};\n}\n\nfunction isIteration(x){\n  return isObject(x) && isBoolean(x.done);\n}\n\nvar Undetermined = 0;\nvar Synchronous = 1;\nvar Asynchronous = 2;\n\nfunction ChainRec(step, init){\n  this._step = step;\n  this._init = init;\n}\n\nChainRec.prototype = Object.create(Core);\n\nChainRec.prototype._fork = function ChainRec$_fork(rej, res){\n\n  var _step = this._step;\n  var _init = this._init;\n  var timing = Undetermined, cancel = noop, state = Next(_init);\n\n  function resolved(it){\n    state = it;\n    timing = timing === Undetermined ? Synchronous : drain();\n  }\n\n  function drain(){\n    while(!state.done){\n      timing = Undetermined;\n      var m = _step(Next, Done, state.value);\n      cancel = m._fork(rej, resolved);\n\n      if(timing !== Synchronous){\n        timing = Asynchronous;\n        return;\n      }\n    }\n\n    res(state.value);\n  }\n\n  drain();\n\n  return function Future$chainRec$cancel(){ cancel(); };\n\n};\n\nChainRec.prototype.toString = function ChainRec$toString(){\n  return 'Future.chainRec(' + showf(this._step) + ', ' + show(this._init) + ')';\n};\n\nfunction chainRec(step, init){\n  return new ChainRec(step, init);\n}\n\nfunction ap$mval(mval, mfunc){\n  if(!Z.Apply.test(mfunc)) invalidArgument('Future.ap', 1, 'be an Apply', mfunc);\n  return Z.ap(mval, mfunc);\n}\n\nfunction ap(mval, mfunc){\n  if(!Z.Apply.test(mval)) invalidArgument('Future.ap', 0, 'be an Apply', mval);\n  if(arguments.length === 1) return partial1(ap$mval, mval);\n  return ap$mval(mval, mfunc);\n}\n\nfunction alt$left(left, right){\n  if(!Z.Alt.test(right)) invalidArgument('alt', 1, 'be an Alt', right);\n  return Z.alt(left, right);\n}\n\nfunction alt(left, right){\n  if(!Z.Alt.test(left)) invalidArgument('alt', 0, 'be an Alt', left);\n  if(arguments.length === 1) return partial1(alt$left, left);\n  return alt$left(left, right);\n}\n\nfunction map$mapper(mapper, m){\n  if(!Z.Functor.test(m)) invalidArgument('Future.map', 1, 'be a Functor', m);\n  return Z.map(mapper, m);\n}\n\nfunction map(mapper, m){\n  if(!isFunction(mapper)) invalidArgument('Future.map', 0, 'be a Function', mapper);\n  if(arguments.length === 1) return partial1(map$mapper, mapper);\n  return map$mapper(mapper, m);\n}\n\nfunction bimap$lmapper$rmapper(lmapper, rmapper, m){\n  if(!Z.Bifunctor.test(m)) invalidArgument('Future.bimap', 2, 'be a Bifunctor', m);\n  return Z.bimap(lmapper, rmapper, m);\n}\n\nfunction bimap$lmapper(lmapper, rmapper, m){\n  if(!isFunction(rmapper)) invalidArgument('Future.bimap', 1, 'be a Function', rmapper);\n  if(arguments.length === 2) return partial2(bimap$lmapper$rmapper, lmapper, rmapper);\n  return bimap$lmapper$rmapper(lmapper, rmapper, m);\n}\n\nfunction bimap(lmapper, rmapper, m){\n  if(!isFunction(lmapper)) invalidArgument('Future.bimap', 0, 'be a Function', lmapper);\n  if(arguments.length === 1) return partial1(bimap$lmapper, lmapper);\n  if(arguments.length === 2) return bimap$lmapper(lmapper, rmapper);\n  return bimap$lmapper(lmapper, rmapper, m);\n}\n\nfunction chain$chainer(chainer, m){\n  if(!Z.Chain.test(m)) invalidArgument('Future.chain', 1, 'be a Chain', m);\n  return Z.chain(chainer, m);\n}\n\nfunction chain(chainer, m){\n  if(!isFunction(chainer)) invalidArgument('Future.chain', 0, 'be a Function', chainer);\n  if(arguments.length === 1) return partial1(chain$chainer, chainer);\n  return chain$chainer(chainer, m);\n}\n\nfunction mapRej$mapper(mapper, m){\n  if(!isFuture(m)) invalidFuture('Future.mapRej', 1, m);\n  return m.mapRej(mapper);\n}\n\nfunction mapRej(mapper, m){\n  if(!isFunction(mapper)) invalidArgument('Future.mapRej', 0, 'be a Function', mapper);\n  if(arguments.length === 1) return partial1(mapRej$mapper, mapper);\n  return mapRej$mapper(mapper, m);\n}\n\nfunction chainRej$chainer(chainer, m){\n  if(!isFuture(m)) invalidFuture('Future.chainRej', 1, m);\n  return m.chainRej(chainer);\n}\n\nfunction chainRej(chainer, m){\n  if(!isFunction(chainer)) invalidArgument('Future.chainRej', 0, 'be a Function', chainer);\n  if(arguments.length === 1) return partial1(chainRej$chainer, chainer);\n  return chainRej$chainer(chainer, m);\n}\n\nfunction lastly$right(right, left){\n  if(!isFuture(left)) invalidFuture('Future.finally', 1, left);\n  return left.finally(right);\n}\n\nfunction lastly(right, left){\n  if(!isFuture(right)) invalidFuture('Future.finally', 0, right);\n  if(arguments.length === 1) return partial1(lastly$right, right);\n  return lastly$right(right, left);\n}\n\nfunction and$left(left, right){\n  if(!isFuture(right)) invalidFuture('Future.and', 1, right);\n  return left.and(right);\n}\n\nfunction and(left, right){\n  if(!isFuture(left)) invalidFuture('Future.and', 0, left);\n  if(arguments.length === 1) return partial1(and$left, left);\n  return and$left(left, right);\n}\n\nfunction both$left(left, right){\n  if(!isFuture(right)) invalidFuture('Future.both', 1, right);\n  return left.both(right);\n}\n\nfunction both(left, right){\n  if(!isFuture(left)) invalidFuture('Future.both', 0, left);\n  if(arguments.length === 1) return partial1(both$left, left);\n  return both$left(left, right);\n}\n\nfunction or$left(left, right){\n  if(!isFuture(right)) invalidFuture('Future.or', 1, right);\n  return left.or(right);\n}\n\nfunction or(left, right){\n  if(!isFuture(left)) invalidFuture('Future.or', 0, left);\n  if(arguments.length === 1) return partial1(or$left, left);\n  return or$left(left, right);\n}\n\nfunction race$right(right, left){\n  if(!isFuture(left)) invalidFuture('Future.race', 1, left);\n  return left.race(right);\n}\n\nfunction race(right, left){\n  if(!isFuture(right)) invalidFuture('Future.race', 0, right);\n  if(arguments.length === 1) return partial1(race$right, right);\n  return race$right(right, left);\n}\n\nfunction swap(m){\n  if(!isFuture(m)) invalidFuture('Future.swap', 0, m);\n  return m.swap();\n}\n\nfunction fold$f$g(f, g, m){\n  if(!isFuture(m)) invalidFuture('Future.fold', 2, m);\n  return m.fold(f, g);\n}\n\nfunction fold$f(f, g, m){\n  if(!isFunction(g)) invalidArgument('Future.fold', 1, 'be a function', g);\n  if(arguments.length === 2) return partial2(fold$f$g, f, g);\n  return fold$f$g(f, g, m);\n}\n\nfunction fold(f, g, m){\n  if(!isFunction(f)) invalidArgument('Future.fold', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(fold$f, f);\n  if(arguments.length === 2) return fold$f(f, g);\n  return fold$f(f, g, m);\n}\n\nfunction done$callback(callback, m){\n  if(!isFuture(m)) invalidFuture('Future.done', 1, m);\n  return m.done(callback);\n}\n\nfunction done(callback, m){\n  if(!isFunction(callback)) invalidArgument('Future.done', 0, 'be a Function', callback);\n  if(arguments.length === 1) return partial1(done$callback, callback);\n  return done$callback(callback, m);\n}\n\nfunction fork$f$g(f, g, m){\n  if(!isFuture(m)) invalidFuture('Future.fork', 2, m);\n  return m._fork(f, g);\n}\n\nfunction fork$f(f, g, m){\n  if(!isFunction(g)) invalidArgument('Future.fork', 1, 'be a function', g);\n  if(arguments.length === 2) return partial2(fork$f$g, f, g);\n  return fork$f$g(f, g, m);\n}\n\nfunction fork(f, g, m){\n  if(!isFunction(f)) invalidArgument('Future.fork', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(fork$f, f);\n  if(arguments.length === 2) return fork$f(f, g);\n  return fork$f(f, g, m);\n}\n\nfunction promise(m){\n  if(!isFuture(m)) invalidFuture('Future.promise', 0, m);\n  return m.promise();\n}\n\nfunction value$cont(cont, m){\n  if(!isFuture(m)) invalidFuture('Future.value', 1, m);\n  return m.value(cont);\n}\n\nfunction value(cont, m){\n  if(!isFunction(cont)) invalidArgument('Future.value', 0, 'be a Function', cont);\n  if(arguments.length === 1) return partial1(value$cont, cont);\n  return value$cont(cont, m);\n}\n\nfunction extractLeft(m){\n  if(!isFuture(m)) invalidFuture('Future.extractLeft', 0, m);\n  return m.extractLeft();\n}\n\nfunction extractRight(m){\n  if(!isFuture(m)) invalidFuture('Future.extractRight', 0, m);\n  return m.extractRight();\n}\n\nfunction check$ap$f(f){\n  if(!isFunction(f)) typeError(\n    'Future#ap expects its first argument to be a Future of a Function'\n    + '\\n  Actual: Future.of(' + show(f) + ')'\n  );\n}\n\nfunction ParallelAp(mval, mfunc){\n  this._mval = mval;\n  this._mfunc = mfunc;\n}\n\nParallelAp.prototype = Object.create(Core);\n\nParallelAp.prototype._fork = function ParallelAp$fork(rej, res){\n  var func, val, okval = false, okfunc = false, rejected = false, c1, c2;\n\n  function ParallelAp$rej(x){\n    if(!rejected){\n      rejected = true;\n      rej(x);\n    }\n  }\n\n  c1 = this._mval._fork(ParallelAp$rej, function ParallelAp$fork$resVal(x){\n    c1 = noop;\n    if(!okval) return void (okfunc = true, val = x);\n    res(func(x));\n  });\n  c2 = this._mfunc._fork(ParallelAp$rej, function ParallelAp$fork$resFunc(f){\n    c2 = noop;\n    check$ap$f(f);\n    if(!okfunc) return void (okval = true, func = f);\n    res(f(val));\n  });\n\n  return function ParallelAp$fork$cancel(){\n    c1();\n    c2();\n  };\n};\n\nParallelAp.prototype.toString = function ParallelAp$toString(){\n  return 'new ParallelAp(' + this._mval.toString() + ', ' + this._mfunc.toString() + ')';\n};\n\nfunction parallelAp(mval, mfunc){\n  return new ParallelAp(mval, mfunc);\n}\n\nfunction After$race(other){\n  return other.isSettled()\n       ? other\n       : isNever(other)\n       ? this\n       : typeof other._time === 'number'\n       ? other._time < this._time ? other : this\n       : Core._race.call(this, other);\n}\n\nfunction After(time, value){\n  this._time = time;\n  this._value = value;\n}\n\nAfter.prototype = Object.create(Core);\n\nAfter.prototype._race = After$race;\n\nAfter.prototype._swap = function After$swap(){\n  return new RejectAfter(this._time, this._value);\n};\n\nAfter.prototype._fork = function After$_fork(rej, res){\n  var id = setTimeout(res, this._time, this._value);\n  return function After$cancel(){ clearTimeout(id); };\n};\n\nAfter.prototype.extractRight = function After$extractRight(){\n  return [this._value];\n};\n\nAfter.prototype.toString = function After$toString(){\n  return 'Future.after(' + show(this._time) + ', ' + show(this._value) + ')';\n};\n\nfunction RejectAfter(time, value){\n  this._time = time;\n  this._value = value;\n}\n\nRejectAfter.prototype = Object.create(Core);\n\nRejectAfter.prototype._race = After$race;\n\nRejectAfter.prototype._swap = function RejectAfter$swap(){\n  return new After(this._time, this._value);\n};\n\nRejectAfter.prototype._fork = function RejectAfter$_fork(rej){\n  var id = setTimeout(rej, this._time, this._value);\n  return function RejectAfter$cancel(){ clearTimeout(id); };\n};\n\nRejectAfter.prototype.extractLeft = function RejectAfter$extractLeft(){\n  return [this._value];\n};\n\nRejectAfter.prototype.toString = function RejectAfter$toString(){\n  return 'Future.rejectAfter(' + show(this._time) + ', ' + show(this._value) + ')';\n};\n\nfunction after$time(time, value){\n  return time === Infinity ? never : new After(time, value);\n}\n\nfunction after(time, value){\n  if(!isUnsigned(time)) invalidArgument('Future.after', 0, 'be a positive integer', time);\n  if(arguments.length === 1) return partial1(after$time, time);\n  return after$time(time, value);\n}\n\nfunction rejectAfter$time(time, reason){\n  return time === Infinity ? never : new RejectAfter(time, reason);\n}\n\nfunction rejectAfter(time, reason){\n  if(!isUnsigned(time)) invalidArgument('Future.rejectAfter', 0, 'be a positive integer', time);\n  if(arguments.length === 1) return partial1(rejectAfter$time, time);\n  return rejectAfter$time(time, reason);\n}\n\nfunction Attempt(fn){\n  this._fn = fn;\n}\n\nAttempt.prototype = Object.create(Core);\n\nAttempt.prototype._fork = function Attempt$fork(rej, res){\n  var r;\n  try{ r = this._fn(); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nAttempt.prototype.toString = function Attempt$toString(){\n  return 'Future.try(' + showf(this._fn) + ')';\n};\n\nfunction attempt(f){\n  if(!isFunction(f)) invalidArgument('Future.try', 0, 'be a function', f);\n  return new Attempt(f);\n}\n\nvar Cold = Cached.Cold = 0;\nvar Pending = Cached.Pending = 1;\nvar Rejected$1 = Cached.Rejected = 2;\nvar Resolved$1 = Cached.Resolved = 3;\n\nfunction Queued(rej, res){\n  this[Rejected$1] = rej;\n  this[Resolved$1] = res;\n}\n\nfunction Cached(pure){\n  this._pure = pure;\n  this.reset();\n}\n\nCached.prototype = Object.create(Core);\n\nCached.prototype.isRejected = function Cached$isRejected(){\n  return this._state === Rejected$1;\n};\n\nCached.prototype.isResolved = function Cached$isResolved(){\n  return this._state === Resolved$1;\n};\n\nCached.prototype.extractLeft = function Cached$extractLeft(){\n  return this.isRejected() ? [this._value] : [];\n};\n\nCached.prototype.extractRight = function Cached$extractRight(){\n  return this.isResolved() ? [this._value] : [];\n};\n\nCached.prototype._addToQueue = function Cached$addToQueue(rej, res){\n  var _this = this;\n  if(_this._state > Pending) return noop;\n  var i = _this._queue.push(new Queued(rej, res)) - 1;\n  _this._queued = _this._queued + 1;\n\n  return function Cached$removeFromQueue(){\n    if(_this._state > Pending) return;\n    _this._queue[i] = undefined;\n    _this._queued = _this._queued - 1;\n    if(_this._queued === 0) _this.reset();\n  };\n};\n\nCached.prototype._drainQueue = function Cached$drainQueue(){\n  if(this._state <= Pending) return;\n  if(this._queued === 0) return;\n  var queue = this._queue;\n  var length = queue.length;\n  var state = this._state;\n  var value = this._value;\n\n  for(var i = 0; i < length; i++){\n    queue[i] && queue[i][state](value);\n    queue[i] = undefined;\n  }\n\n  this._queue = undefined;\n  this._queued = 0;\n};\n\nCached.prototype.reject = function Cached$reject(reason){\n  if(this._state > Pending) return;\n  this._value = reason;\n  this._state = Rejected$1;\n  this._drainQueue();\n};\n\nCached.prototype.resolve = function Cached$resolve(value){\n  if(this._state > Pending) return;\n  this._value = value;\n  this._state = Resolved$1;\n  this._drainQueue();\n};\n\nCached.prototype.run = function Cached$run(){\n  var _this = this;\n  if(_this._state > Cold) return;\n  _this._state = Pending;\n  _this._cancel = _this._pure._fork(\n    function Cached$fork$rej(x){ _this.reject(x); },\n    function Cached$fork$res(x){ _this.resolve(x); }\n  );\n};\n\nCached.prototype.reset = function Cached$reset(){\n  if(this._state === Cold) return;\n  if(this._state > Pending) this._cancel();\n  this._cancel = noop;\n  this._queue = [];\n  this._queued = 0;\n  this._value = undefined;\n  this._state = Cold;\n};\n\nCached.prototype._fork = function Cached$_fork(rej, res){\n  var cancel = noop;\n\n  switch(this._state){\n    case Pending: cancel = this._addToQueue(rej, res); break;\n    case Rejected$1: rej(this._value); break;\n    case Resolved$1: res(this._value); break;\n    default: cancel = this._addToQueue(rej, res); this.run();\n  }\n\n  return cancel;\n};\n\nCached.prototype.toString = function Cached$toString(){\n  return 'Future.cache(' + this._pure.toString() + ')';\n};\n\nfunction cache(m){\n  if(!isFuture(m)) invalidFuture('Future.cache', 0, m);\n  return new Cached(m);\n}\n\nfunction Encase(fn, a){\n  this._fn = fn;\n  this._a = a;\n}\n\nEncase.prototype = Object.create(Core);\n\nEncase.prototype._fork = function Encase$fork(rej, res){\n  var r;\n  try{ r = this._fn(this._a); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nEncase.prototype.toString = function Encase$toString(){\n  return 'Future.encase(' + showf(this._fn) + ', ' + show(this._a) + ')';\n};\n\nfunction encase(f, x){\n  if(!isFunction(f)) invalidArgument('Future.encase', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(encase, f);\n  return new Encase(f, x);\n}\n\nfunction Encase2(fn, a, b){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n}\n\nEncase2.prototype = Object.create(Core);\n\nEncase2.prototype._fork = function Encase2$fork(rej, res){\n  var r;\n  try{ r = this._fn(this._a, this._b); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nEncase2.prototype.toString = function Encase2$toString(){\n  return 'Future.encase2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n};\n\nfunction encase2(f, x, y){\n  if(!isFunction(f)) invalidArgument('Future.encase2', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encase2, f);\n    case 2: return partial2(encase2, f, x);\n    default: return new Encase2(f, x, y);\n  }\n}\n\nfunction Encase3(fn, a, b, c){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n  this._c = c;\n}\n\nEncase3.prototype = Object.create(Core);\n\nEncase3.prototype._fork = function Encase3$fork(rej, res){\n  var r;\n  try{ r = this._fn(this._a, this._b, this._c); }catch(e){ rej(e); return noop }\n  res(r);\n  return noop;\n};\n\nEncase3.prototype.toString = function Encase3$toString(){\n  return 'Future.encase3('\n       + showf(this._fn)\n       + ', '\n       + show(this._a)\n       + ', '\n       + show(this._b)\n       + ', '\n       + show(this._c)\n       + ')';\n};\n\nfunction encase3(f, x, y, z){\n  if(!isFunction(f)) invalidArgument('Future.encase3', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encase3, f);\n    case 2: return partial2(encase3, f, x);\n    case 3: return partial3(encase3, f, x, y);\n    default: return new Encase3(f, x, y, z);\n  }\n}\n\nfunction EncaseN(fn, a){\n  this._fn = fn;\n  this._a = a;\n}\n\nEncaseN.prototype = Object.create(Core);\n\nEncaseN.prototype._fork = function EncaseN$fork(rej, res){\n  var open = true;\n  this._fn(this._a, function EncaseN$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function EncaseN$cancel(){ open = false; };\n};\n\nEncaseN.prototype.toString = function EncaseN$toString(){\n  return 'Future.encaseN(' + showf(this._fn) + ', ' + show(this._a) + ')';\n};\n\nfunction encaseN(f, x){\n  if(!isFunction(f)) invalidArgument('Future.encaseN', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(encaseN, f);\n  return new EncaseN(f, x);\n}\n\nfunction EncaseN2(fn, a, b){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n}\n\nEncaseN2.prototype = Object.create(Core);\n\nEncaseN2.prototype._fork = function EncaseN2$fork(rej, res){\n  var open = true;\n  this._fn(this._a, this._b, function EncaseN2$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function EncaseN2$cancel(){ open = false; };\n};\n\nEncaseN2.prototype.toString = function EncaseN2$toString(){\n  return 'Future.encaseN2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n};\n\nfunction encaseN2(f, x, y){\n  if(!isFunction(f)) invalidArgument('Future.encaseN2', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseN2, f);\n    case 2: return partial2(encaseN2, f, x);\n    default: return new EncaseN2(f, x, y);\n  }\n}\n\nfunction EncaseN$1(fn, a, b, c){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n  this._c = c;\n}\n\nEncaseN$1.prototype = Object.create(Core);\n\nEncaseN$1.prototype._fork = function EncaseN$3$fork(rej, res){\n  var open = true;\n  this._fn(this._a, this._b, this._c, function EncaseN$3$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function EncaseN$3$cancel(){ open = false; };\n};\n\nEncaseN$1.prototype.toString = function EncaseN$3$toString(){\n  return 'Future.encaseN3('\n       + showf(this._fn)\n       + ', '\n       + show(this._a)\n       + ', '\n       + show(this._b)\n       + ', '\n       + show(this._c)\n       + ')';\n};\n\nfunction encaseN3(f, x, y, z){\n  if(!isFunction(f)) invalidArgument('Future.encaseN3', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseN3, f);\n    case 2: return partial2(encaseN3, f, x);\n    case 3: return partial3(encaseN3, f, x, y);\n    default: return new EncaseN$1(f, x, y, z);\n  }\n}\n\nfunction check$promise(p, f, a){\n  return isThenable(p) ? p : typeError(\n    'Future.encaseP expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n    + '\\n  With: ' + (show(a))\n  );\n}\n\nfunction EncaseP(fn, a){\n  this._fn = fn;\n  this._a = a;\n}\n\nEncaseP.prototype = Object.create(Core);\n\nEncaseP.prototype._fork = function EncaseP$fork(rej, res){\n  var _fn = this._fn;\n  var _a = this._a;\n  var open = true;\n  check$promise(_fn(_a), _fn, _a).then(immediately(function EncaseP$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function EncaseP$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function EncaseP$cancel(){ open = false; };\n};\n\nEncaseP.prototype.toString = function EncaseP$toString(){\n  return 'Future.encaseP(' + showf(this._fn) + ', ' + show(this._a) + ')';\n};\n\nfunction encaseP(f, x){\n  if(!isFunction(f)) invalidArgument('Future.encaseP', 0, 'be a function', f);\n  if(arguments.length === 1) return partial1(encaseP, f);\n  return new EncaseP(f, x);\n}\n\nfunction check$promise$1(p, f, a, b){\n  return isThenable(p) ? p : typeError(\n    'Future.encaseP2 expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n    + '\\n  With 1: ' + (show(a))\n    + '\\n  With 2: ' + (show(b))\n  );\n}\n\nfunction EncaseP2(fn, a, b){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n}\n\nEncaseP2.prototype = Object.create(Core);\n\nEncaseP2.prototype._fork = function EncaseP2$fork(rej, res){\n  var _fn = this._fn;\n  var _a = this._a;\n  var _b = this._b;\n  var open = true;\n  check$promise$1(_fn(_a, _b), _fn, _a, _b).then(immediately(function EncaseP2$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function EncaseP2$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function EncaseP2$cancel(){ open = false; };\n};\n\nEncaseP2.prototype.toString = function EncaseP2$toString(){\n  return 'Future.encaseP2(' + showf(this._fn) + ', ' + show(this._a) + ', ' + show(this._b) + ')';\n};\n\nfunction encaseP2(f, x, y){\n  if(!isFunction(f)) invalidArgument('Future.encaseP2', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseP2, f);\n    case 2: return partial2(encaseP2, f, x);\n    default: return new EncaseP2(f, x, y);\n  }\n}\n\nfunction check$promise$2(p, f, a, b, c){\n  return isThenable(p) ? p : typeError(\n    'Future.encaseP3 expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + (show(p)) + '\\n  From calling: ' + (showf(f))\n    + '\\n  With 1: ' + (show(a))\n    + '\\n  With 2: ' + (show(b))\n    + '\\n  With 3: ' + (show(c))\n  );\n}\n\nfunction EncaseP3(fn, a, b, c){\n  this._fn = fn;\n  this._a = a;\n  this._b = b;\n  this._c = c;\n}\n\nEncaseP3.prototype = Object.create(Core);\n\nEncaseP3.prototype._fork = function EncaseP3$fork(rej, res){\n  var _fn = this._fn;\n  var _a = this._a;\n  var _b = this._b;\n  var _c = this._c;\n  var open = true;\n  check$promise$2(_fn(_a, _b, _c), _fn, _a, _b, _c).then(immediately(function EncaseP3$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function EncaseP3$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function EncaseP3$cancel(){ open = false; };\n};\n\nEncaseP3.prototype.toString = function EncaseP3$toString(){\n  return 'Future.encaseP3('\n       + showf(this._fn)\n       + ', '\n       + show(this._a)\n       + ', '\n       + show(this._b)\n       + ', '\n       + show(this._c)\n       + ')';\n};\n\nfunction encaseP3(f, x, y, z){\n  if(!isFunction(f)) invalidArgument('Future.encaseP3', 0, 'be a function', f);\n\n  switch(arguments.length){\n    case 1: return partial1(encaseP3, f);\n    case 2: return partial2(encaseP3, f, x);\n    case 3: return partial3(encaseP3, f, x, y);\n    default: return new EncaseP3(f, x, y, z);\n  }\n}\n\n/*eslint consistent-return: 0*/\n\nfunction check$iterator(g){\n  return isIterator(g) ? g : invalidArgument(\n    'Future.do', 0, 'return an iterator, maybe you forgot the \"*\"', g\n  );\n}\n\nfunction check$iteration(o){\n  if(!isIteration(o)) typeError(\n    'Future.do was given an invalid generator:'\n    + ' Its iterator did not return a valid iteration from iterator.next()'\n    + '\\n  Actual: ' + show(o)\n  );\n  if(o.done || isFuture(o.value)) return o;\n  return invalidFuture(\n    'Future.do',\n    'the iterator to produce only valid Futures',\n    o.value,\n    '\\n  Tip: If you\\'re using a generator, make sure you always yield a Future'\n  );\n}\n\nfunction Go(generator){\n  this._generator = generator;\n}\n\nGo.prototype = Object.create(Core);\n\nGo.prototype._fork = function Go$_fork(rej, res){\n\n  var iterator = check$iterator(this._generator());\n\n  var timing = Undetermined, cancel = noop, state, value;\n\n  function resolved(x){\n    value = x;\n    if(timing === Asynchronous) return drain();\n    timing = Synchronous;\n    state = check$iteration(iterator.next(value));\n  }\n\n  function drain(){\n    state = check$iteration(iterator.next(value));\n\n    while(!state.done){\n      timing = Undetermined;\n      cancel = state.value._fork(rej, resolved);\n\n      if(timing !== Synchronous){\n        timing = Asynchronous;\n        return;\n      }\n    }\n\n    res(state.value);\n  }\n\n  drain();\n\n  return function Go$cancel(){ cancel(); };\n\n};\n\nGo.prototype.toString = function Go$toString(){\n  return 'Future.do(' + showf(this._generator) + ')';\n};\n\nfunction go(generator){\n  if(!isFunction(generator)) invalidArgument('Future.do', 0, 'be a Function', generator);\n  return new Go(generator);\n}\n\nfunction check$dispose(m, f, x){\n  if(!isFuture(m)) invalidFuture(\n    'Future.hook',\n    'the first function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nfunction check$consume(m, f, x){\n  if(!isFuture(m)) invalidFuture(\n    'Future.hook',\n    'the second function it\\'s given to return a Future',\n    m,\n    '\\n  From calling: ' + showf(f) + '\\n  With: ' + show(x)\n  );\n}\n\nfunction Hook(acquire, dispose, consume){\n  this._acquire = acquire;\n  this._dispose = dispose;\n  this._consume = consume;\n}\n\nHook.prototype = Object.create(Core);\n\nHook.prototype._fork = function Hook$fork(rej, res){\n\n  var _acquire = this._acquire, _dispose = this._dispose, _consume = this._consume;\n  var cancel, cancelAcquire = noop, cancelConsume = noop, resource, value, cont = noop;\n\n  function Hook$done(){\n    cont(value);\n  }\n\n  function Hook$dispose(){\n    var disposal = _dispose(resource);\n    check$dispose(disposal, _dispose, resource);\n    cancel = disposal._fork(rej, Hook$done);\n    return cancel;\n  }\n\n  function Hook$cancelConsuption(){\n    cancelConsume();\n    Hook$dispose()();\n  }\n\n  function Hook$consumptionRejected(x){\n    cont = rej;\n    value = x;\n    Hook$dispose();\n  }\n\n  function Hook$consumptionResolved(x){\n    cont = res;\n    value = x;\n    Hook$dispose();\n  }\n\n  function Hook$acquireResolved(x){\n    resource = x;\n    var consumption = _consume(resource);\n    check$consume(consumption, _consume, resource);\n    cancel = Hook$cancelConsuption;\n    cancelConsume = consumption._fork(Hook$consumptionRejected, Hook$consumptionResolved);\n  }\n\n  cancelAcquire = _acquire._fork(rej, Hook$acquireResolved);\n\n  cancel = cancel || cancelAcquire;\n\n  return function Hook$fork$cancel(){ cancel(); };\n\n};\n\nHook.prototype.toString = function Hook$toString(){\n  return 'Future.hook('\n       + this._acquire.toString()\n       + ', '\n       + showf(this._dispose)\n       + ', '\n       + showf(this._consume)\n       + ')';\n};\n\nfunction hook$acquire$cleanup(acquire, cleanup, consume){\n  if(!isFunction(consume)) invalidArgument('Future.hook', 2, 'be a Future', consume);\n  return new Hook(acquire, cleanup, consume);\n}\n\nfunction hook$acquire(acquire, cleanup, consume){\n  if(!isFunction(cleanup)) invalidArgument('Future.hook', 1, 'be a function', cleanup);\n  if(arguments.length === 2) return partial2(hook$acquire$cleanup, acquire, cleanup);\n  return hook$acquire$cleanup(acquire, cleanup, consume);\n}\n\nfunction hook(acquire, cleanup, consume){\n  if(!isFuture(acquire)) invalidFuture('Future.hook', 0, acquire);\n  if(arguments.length === 1) return partial1(hook$acquire, acquire);\n  if(arguments.length === 2) return hook$acquire(acquire, cleanup);\n  return hook$acquire(acquire, cleanup, consume);\n}\n\nfunction Node(fn){\n  this._fn = fn;\n}\n\nNode.prototype = Object.create(Core);\n\nNode.prototype._fork = function Node$fork(rej, res){\n  var open = true;\n  this._fn(function Node$done(err, val){\n    if(open){\n      open = false;\n      err ? rej(err) : res(val);\n    }\n  });\n  return function Node$cancel(){ open = false; };\n};\n\nNode.prototype.toString = function Node$toString(){\n  return 'Future.node(' + showf(this._fn) + ')';\n};\n\nfunction node(f){\n  if(!isFunction(f)) invalidArgument('Future.node', 0, 'be a function', f);\n  return new Node(f);\n}\n\nfunction check$parallel(m, i){\n  return isFuture(m) ? m : invalidFuture(\n    'Future.parallel',\n    'its second argument to be an array of valid Futures. '\n  + 'The value at position ' + i + ' in the array is not a Future',\n    m\n  );\n}\n\nfunction Parallel(max, futures){\n  this._futures = futures;\n  this._length = futures.length;\n  this._max = Math.min(this._length, max);\n}\n\nParallel.prototype = Object.create(Core);\n\nParallel.prototype._fork = function Parallel$_fork(rej, res){\n\n  var _futures = this._futures, _length = this._length, _max = this._max;\n  var cancels = new Array(_length), out = new Array(_length);\n  var cursor = 0, running = 0, blocked = false;\n\n  function Parallel$cancel(){\n    cursor = _length;\n    for(var n = 0; n < _length; n++) cancels[n] && cancels[n]();\n  }\n\n  function Parallel$run(idx){\n    running++;\n    cancels[idx] = _futures[idx]._fork(function Parallel$rej(reason){\n      cancels[idx] = noop;\n      Parallel$cancel();\n      rej(reason);\n    }, function Parallel$res(value){\n      cancels[idx] = noop;\n      out[idx] = value;\n      running--;\n      if(cursor === _length && running === 0) res(out);\n      else if(blocked) Parallel$drain();\n    });\n  }\n\n  function Parallel$drain(){\n    blocked = false;\n    while(cursor < _length && running < _max) Parallel$run(cursor++);\n    blocked = true;\n  }\n\n  Parallel$drain();\n\n  return Parallel$cancel;\n\n};\n\nParallel.prototype.toString = function Parallel$toString(){\n  return 'Future.parallel(' + this._max + ', ' + show(this._futures) + ')';\n};\n\nvar emptyArray = new Resolved([]);\n\nfunction parallel$max(max, xs){\n  if(!isArray(xs)) invalidArgument('Future.parallel', 1, 'be an array', xs);\n  var futures = mapArray(xs, check$parallel);\n  return futures.length === 0 ? emptyArray : new Parallel(max, futures);\n}\n\nfunction parallel(max, xs){\n  if(!isUnsigned(max)) invalidArgument('Future.parallel', 0, 'be a positive integer', max);\n  if(arguments.length === 1) return partial1(parallel$max, max);\n  return parallel$max(max, xs);\n}\n\nfunction check$promise$3(p, f){\n  return isThenable(p) ? p : typeError(\n    'Future.tryP expects the function it\\'s given to return a Promise/Thenable'\n    + '\\n  Actual: ' + show(p) + '\\n  From calling: ' + showf(f)\n  );\n}\n\nfunction TryP(fn){\n  this._fn = fn;\n}\n\nTryP.prototype = Object.create(Core);\n\nTryP.prototype._fork = function TryP$fork(rej, res){\n  var open = true;\n  check$promise$3(this._fn(), this._fn).then(immediately(function TryP$res(x){\n    if(open){\n      open = false;\n      res(x);\n    }\n  }), immediately(function TryP$rej(x){\n    if(open){\n      open = false;\n      rej(x);\n    }\n  }));\n  return function TryP$cancel(){ open = false; };\n};\n\nTryP.prototype.toString = function TryP$toString(){\n  return 'Future.tryP(' + show(this._fn) + ')';\n};\n\nfunction tryP(f){\n  if(!isFunction(f)) invalidArgument('Future.tryP', 0, 'be a function', f);\n  return new TryP(f);\n}\n\nif(typeof Object.create !== 'function') error('Please polyfill Object.create to use Fluture');\nif(typeof Object.assign !== 'function') error('Please polyfill Object.assign to use Fluture');\nif(typeof Array.isArray !== 'function') error('Please polyfill Array.isArray to use Fluture');\n\nFuture.of = Future[FL.of] = of;\nFuture.chainRec = Future[FL.chainRec] = chainRec;\nFuture.reject = reject;\nFuture.ap = ap;\nFuture.map = map;\nFuture.bimap = bimap;\nFuture.chain = chain;\n\nvar Par = concurrify(Future, never, race, parallelAp);\nPar.of = Par[FL.of];\nPar.zero = Par[FL.zero];\nPar.map = map;\nPar.ap = ap;\nPar.alt = alt;\n\nfunction isParallel(x){\n  return x instanceof Par || type(x) === Par['@@type'];\n}\n\nfunction seq(par){\n  if(!isParallel(par)) invalidArgument('Future.seq', 0, 'to be a Par', par);\n  return par.sequential;\n}\n\n\n\n\nvar Fluture = Object.freeze({\n\tFuture: Future,\n\tdefault: Future,\n\tPar: Par,\n\tisParallel: isParallel,\n\tseq: seq,\n\tisFuture: isFuture,\n\treject: reject,\n\tof: of,\n\tnever: never,\n\tisNever: isNever,\n\tafter: after,\n\trejectAfter: rejectAfter,\n\tattempt: attempt,\n\ttry: attempt,\n\tcache: cache,\n\tencase: encase,\n\tencase2: encase2,\n\tencase3: encase3,\n\tencaseN: encaseN,\n\tencaseN2: encaseN2,\n\tencaseN3: encaseN3,\n\tencaseP: encaseP,\n\tencaseP2: encaseP2,\n\tencaseP3: encaseP3,\n\tgo: go,\n\tdo: go,\n\thook: hook,\n\tnode: node,\n\tparallel: parallel,\n\ttryP: tryP,\n\tap: ap,\n\talt: alt,\n\tmap: map,\n\tbimap: bimap,\n\tchain: chain,\n\tmapRej: mapRej,\n\tchainRej: chainRej,\n\tlastly: lastly,\n\tfinally: lastly,\n\tand: and,\n\tboth: both,\n\tor: or,\n\trace: race,\n\tswap: swap,\n\tfold: fold,\n\tdone: done,\n\tfork: fork,\n\tpromise: promise,\n\tvalue: value,\n\textractLeft: extractLeft,\n\textractRight: extractRight\n});\n\nvar index_cjs = Object.assign(Future, Fluture);\n\nreturn index_cjs;\n\n})));\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","(function(f) {\n\n  'use strict';\n\n  /*istanbul ignore next*/\n  if(typeof module === 'object' && typeof module.exports === 'object') {\n    module.exports = f();\n  }else{\n    self.inspectf = f();\n  }\n\n}(function() {\n\n  'use strict';\n\n  function checkn(n) {\n    if(typeof n !== 'number') {\n      throw new TypeError(\n        'inspectf expects its first argument to be a number'\n      );\n    }\n  }\n\n  function checkf(f) {\n    if(typeof f !== 'function') {\n      throw new TypeError(\n        'inspectf expects its second argument to be a function'\n      );\n    }\n  }\n\n  var RSPACE = /^ */;\n  var RCODE = /\\s*[^\\s]/;\n  var RTABS = /\\t/g;\n  var REOL = /\\n\\r?/;\n\n  function isCode(line) {\n    return RCODE.test(line);\n  }\n\n  function getPadding(line) {\n    return line.match(RSPACE)[0].length;\n  }\n\n  function guessIndentation(lines) {\n    var filtered = lines.filter(isCode);\n    var paddings = filtered.map(getPadding);\n    var depth = paddings.reduce(Math.min, Infinity);\n    var tabsize = paddings\n    .map(function(x) { return x - depth; })\n    .find(function(x) { return x > 1; }) || 2;\n    return {depth: depth, tabsize: tabsize};\n  }\n\n  function pad(n) {\n    return (new Array(n + 1)).join(' ');\n  }\n\n  function show(f, indentation) {\n    return f.toString().replace(RTABS, indentation);\n  }\n\n  function toLines(s) {\n    return s.split(REOL);\n  }\n\n  function fixIndentation(lines, indentation) {\n    var info = guessIndentation(lines.slice(1));\n    var RPAD = new RegExp(pad(info.tabsize), 'g');\n    return lines.map(function(line) {\n      return line.slice(Math.min(info.depth, getPadding(line)))\n      .replace(RPAD, '\\t').replace(RTABS, indentation);\n    }).join('\\n');\n  }\n\n  return function inspectf(n, f) {\n    checkn(n);\n\n    if(arguments.length < 2) {\n      return function inspectf$partial(f) { return inspectf(n, f); };\n    }\n\n    checkf(f);\n    if(f.toString !== Function.prototype.toString) { return f.toString(); }\n    var i = pad(n), shown = show(f, i), lines = toLines(shown, i);\n    if(lines.length < 2) { return shown; }\n    return fixIndentation(lines, i);\n  };\n\n}));\n","'use strict';\n\n/**\n * Custom implementation of a double ended queue.\n */\nfunction Denque(array) {\n  this._head = 0;\n  this._tail = 0;\n  this._capacityMask = 0x3;\n  this._list = new Array(4);\n  if (Array.isArray(array)) {\n    this._fromArray(array);\n  }\n}\n\n/**\n * -------------\n *  PUBLIC API\n * -------------\n */\n\n/**\n * Returns the item at the specified index from the list.\n * 0 is the first element, 1 is the second, and so on...\n * Elements at negative values are that many from the end: -1 is one before the end\n * (the last element), -2 is two before the end (one before last), etc.\n * @param index\n * @returns {*}\n */\nDenque.prototype.peekAt = function peekAt(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var len = this.size();\n  if (i >= len || i < -len) return undefined;\n  if (i < 0) i += len;\n  i = (this._head + i) & this._capacityMask;\n  return this._list[i];\n};\n\n/**\n * Alias for peakAt()\n * @param i\n * @returns {*}\n */\nDenque.prototype.get = function get(i) {\n  return this.peekAt(i);\n};\n\n/**\n * Returns the first item in the list without removing it.\n * @returns {*}\n */\nDenque.prototype.peek = function peek() {\n  if (this._head === this._tail) return undefined;\n  return this._list[this._head];\n};\n\n/**\n * Alias for peek()\n * @returns {*}\n */\nDenque.prototype.peekFront = function peekFront() {\n  return this.peek();\n};\n\n/**\n * Returns the item that is at the back of the queue without removing it.\n * Uses peekAt(-1)\n */\nDenque.prototype.peekBack = function peekBack() {\n  return this.peekAt(-1);\n};\n\n/**\n * Returns the current length of the queue\n * @return {Number}\n */\nObject.defineProperty(Denque.prototype, 'length', {\n  get: function length() {\n    return this.size();\n  }\n});\n\n/**\n * Return the number of items on the list, or 0 if empty.\n * @returns {number}\n */\nDenque.prototype.size = function size() {\n  if (this._head === this._tail) return 0;\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Add an item at the beginning of the list.\n * @param item\n */\nDenque.prototype.unshift = function unshift(item) {\n  if (item === undefined) return this.size();\n  var len = this._list.length;\n  this._head = (this._head - 1 + len) & this._capacityMask;\n  this._list[this._head] = item;\n  if (this._tail === this._head) this._growArray();\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the first item on the list,\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.shift = function shift() {\n  var head = this._head;\n  if (head === this._tail) return undefined;\n  var item = this._list[head];\n  this._list[head] = undefined;\n  this._head = (head + 1) & this._capacityMask;\n  if (head < 2 && this._tail > 10000 && this._tail <= this._list.length >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Add an item to the bottom of the list.\n * @param item\n */\nDenque.prototype.push = function push(item) {\n  if (item === undefined) return this.size();\n  var tail = this._tail;\n  this._list[tail] = item;\n  this._tail = (tail + 1) & this._capacityMask;\n  if (this._tail === this._head) {\n    this._growArray();\n  }\n\n  if (this._head < this._tail) return this._tail - this._head;\n  else return this._capacityMask + 1 - (this._head - this._tail);\n};\n\n/**\n * Remove and return the last item on the list.\n * Returns undefined if the list is empty.\n * @returns {*}\n */\nDenque.prototype.pop = function pop() {\n  var tail = this._tail;\n  if (tail === this._head) return undefined;\n  var len = this._list.length;\n  this._tail = (tail - 1 + len) & this._capacityMask;\n  var item = this._list[this._tail];\n  this._list[this._tail] = undefined;\n  if (this._head < 2 && tail > 10000 && tail <= len >>> 2) this._shrinkArray();\n  return item;\n};\n\n/**\n * Remove and return the item at the specified index from the list.\n * Returns undefined if the list is empty.\n * @param index\n * @returns {*}\n */\nDenque.prototype.removeOne = function removeOne(index) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size) return void 0;\n  if (i < 0) i += size;\n  i = (this._head + i) & this._capacityMask;\n  var item = this._list[i];\n  var k;\n  if (index < size / 2) {\n    for (k = index; k > 0; k--) {\n      this._list[i] = this._list[i = (i - 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._head = (this._head + 1 + len) & this._capacityMask;\n  } else {\n    for (k = size - 1 - index; k > 0; k--) {\n      this._list[i] = this._list[i = ( i + 1 + len) & this._capacityMask];\n    }\n    this._list[i] = void 0;\n    this._tail = (this._tail - 1 + len) & this._capacityMask;\n  }\n  return item;\n};\n\n/**\n * Remove number of items from the specified index from the list.\n * Returns array of removed items.\n * Returns undefined if the list is empty.\n * @param index\n * @param count\n * @returns {array}\n */\nDenque.prototype.remove = function remove(index, count) {\n  var i = index;\n  var removed;\n  var del_count = count;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  if (this._head === this._tail) return void 0;\n  var size = this.size();\n  var len = this._list.length;\n  if (i >= size || i < -size || count < 1) return void 0;\n  if (i < 0) i += size;\n  if (count === 1 || !count) {\n    removed = new Array(1);\n    removed[0] = this.removeOne(i);\n    return removed;\n  }\n  if (i === 0 && i + count >= size) {\n    removed = this.toArray();\n    this.clear();\n    return removed;\n  }\n  if (i + count > size) count = size - i;\n  var k;\n  removed = new Array(count);\n  for (k = 0; k < count; k++) {\n    removed[k] = this._list[(this._head + i + k) & this._capacityMask];\n  }\n  i = (this._head + i) & this._capacityMask;\n  if (index + count === size) {\n    this._tail = (this._tail - count + len) & this._capacityMask;\n    for (k = count; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index === 0) {\n    this._head = (this._head + count + len) & this._capacityMask;\n    for (k = count - 1; k > 0; k--) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n    }\n    return removed;\n  }\n  if (index < size / 2) {\n    this._head = (this._head + index + count + len) & this._capacityMask;\n    for (k = index; k > 0; k--) {\n      this.unshift(this._list[i = (i - 1 + len) & this._capacityMask]);\n    }\n    i = (this._head - 1 + len) & this._capacityMask;\n    while (del_count > 0) {\n      this._list[i = (i - 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  } else {\n    this._tail = i;\n    i = (i + count + len) & this._capacityMask;\n    for (k = size - (count + index); k > 0; k--) {\n      this.push(this._list[i++]);\n    }\n    i = this._tail;\n    while (del_count > 0) {\n      this._list[i = (i + 1 + len) & this._capacityMask] = void 0;\n      del_count--;\n    }\n  }\n  if (this._head < 2 && this._tail > 10000 && this._tail <= len >>> 2) this._shrinkArray();\n  return removed;\n};\n\n/**\n * Native splice implementation.\n * Remove number of items from the specified index from the list and/or add new elements.\n * Returns array of removed items or empty array if count == 0.\n * Returns undefined if the list is empty.\n *\n * @param index\n * @param count\n * @param {...*} [elements]\n * @returns {array}\n */\nDenque.prototype.splice = function splice(index, count) {\n  var i = index;\n  // expect a number or return undefined\n  if ((i !== (i | 0))) {\n    return void 0;\n  }\n  var size = this.size();\n  if (i < 0) i += size;\n  if (i > size) return void 0;\n  if (arguments.length > 2) {\n    var k;\n    var temp;\n    var removed;\n    var arg_len = arguments.length;\n    var len = this._list.length;\n    var arguments_index = 2;\n    if (!size || i < size / 2) {\n      temp = new Array(i);\n      for (k = 0; k < i; k++) {\n        temp[k] = this._list[(this._head + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i > 0) {\n          this._head = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._head = (this._head + i + len) & this._capacityMask;\n      }\n      while (arg_len > arguments_index) {\n        this.unshift(arguments[--arg_len]);\n      }\n      for (k = i; k > 0; k--) {\n        this.unshift(temp[k - 1]);\n      }\n    } else {\n      temp = new Array(size - (i + count));\n      var leng = temp.length;\n      for (k = 0; k < leng; k++) {\n        temp[k] = this._list[(this._head + i + count + k) & this._capacityMask];\n      }\n      if (count === 0) {\n        removed = [];\n        if (i != size) {\n          this._tail = (this._head + i + len) & this._capacityMask;\n        }\n      } else {\n        removed = this.remove(i, count);\n        this._tail = (this._tail - leng + len) & this._capacityMask;\n      }\n      while (arguments_index < arg_len) {\n        this.push(arguments[arguments_index++]);\n      }\n      for (k = 0; k < leng; k++) {\n        this.push(temp[k]);\n      }\n    }\n    return removed;\n  } else {\n    return this.remove(i, count);\n  }\n};\n\n/**\n * Soft clear - does not reset capacity.\n */\nDenque.prototype.clear = function clear() {\n  this._head = 0;\n  this._tail = 0;\n};\n\n/**\n * Returns true or false whether the list is empty.\n * @returns {boolean}\n */\nDenque.prototype.isEmpty = function isEmpty() {\n  return this._head === this._tail;\n};\n\n/**\n * Returns an array of all queue items.\n * @returns {Array}\n */\nDenque.prototype.toArray = function toArray() {\n  return this._copyArray(false);\n};\n\n/**\n * -------------\n *   INTERNALS\n * -------------\n */\n\n/**\n * Fills the queue with items from an array\n * For use in the constructor\n * @param array\n * @private\n */\nDenque.prototype._fromArray = function _fromArray(array) {\n  for (var i = 0; i < array.length; i++) this.push(array[i]);\n};\n\n/**\n *\n * @param fullCopy\n * @returns {Array}\n * @private\n */\nDenque.prototype._copyArray = function _copyArray(fullCopy) {\n  var newArray = [];\n  var list = this._list;\n  var len = list.length;\n  var i;\n  if (fullCopy || this._head > this._tail) {\n    for (i = this._head; i < len; i++) newArray.push(list[i]);\n    for (i = 0; i < this._tail; i++) newArray.push(list[i]);\n  } else {\n    for (i = this._head; i < this._tail; i++) newArray.push(list[i]);\n  }\n  return newArray;\n};\n\n/**\n * Grows the internal list array.\n * @private\n */\nDenque.prototype._growArray = function _growArray() {\n  if (this._head) {\n    // copy existing data, head to end, then beginning to tail.\n    this._list = this._copyArray(true);\n    this._head = 0;\n  }\n\n  // head is at 0 and array is now full, safe to extend\n  this._tail = this._list.length;\n\n  this._list.length *= 2;\n  this._capacityMask = (this._capacityMask << 1) | 1;\n};\n\n/**\n * Shrinks the internal list array.\n * @private\n */\nDenque.prototype._shrinkArray = function _shrinkArray() {\n  this._list.length >>>= 1;\n  this._capacityMask >>>= 1;\n};\n\n\nmodule.exports = Denque;\n","(function(f){\n\n  'use strict';\n\n  /*istanbul ignore next*/\n  if(typeof module === 'object' && typeof module.exports === 'object'){\n    module.exports = f(require('sanctuary-type-classes'), require('sanctuary-type-identifiers'));\n  }else{\n    self.concurrify = f(self.sanctuaryTypeClasses, self.sanctuaryTypeIdentifiers);\n  }\n\n}(function(Z, type){\n\n  'use strict';\n\n  var $alt = 'fantasy-land/alt';\n  var $ap = 'fantasy-land/ap';\n  var $map = 'fantasy-land/map';\n  var $of = 'fantasy-land/of';\n  var $zero = 'fantasy-land/zero';\n  var $$type = '@@type';\n  var ordinal = ['first', 'second', 'third', 'fourth', 'fifth'];\n\n  function isFunction(f){\n    return typeof f === 'function';\n  }\n\n  function isBinary(f){\n    return f.length >= 2;\n  }\n\n  function isApplicativeRepr(Repr){\n    try{\n      return Z.Applicative.test(Z.of(Repr));\n    }catch(_){\n      return false;\n    }\n  }\n\n  function invalidArgument(it, at, expected, actual){\n    throw new TypeError(\n      it\n      + ' expects its '\n      + ordinal[at]\n      + ' argument to '\n      + expected\n      + '\\n  Actual: '\n      + Z.toString(actual)\n    );\n  }\n\n  function invalidContext(it, actual, an){\n    throw new TypeError(\n      it + ' was invoked outside the context of a ' + an + '. \\n  Called on: ' + Z.toString(actual)\n    );\n  }\n\n  //       getTypeIdentifier :: TypeRepresentative -> TypeIdentifier\n  function getTypeIdentifier(Repr){\n    return Repr[$$type] || Repr.name || 'Anonymous';\n  }\n\n  //       generateTypeIdentifier :: TypeIdentifier -> TypeIdentifier\n  function generateTypeIdentifier(identifier){\n    var o = type.parse(identifier);\n    return (o.namespace || 'concurrify') + '/Concurrent' + o.name + '@' + o.version;\n  }\n\n  //concurrify :: Applicative m\n  //           => (TypeRep m, m a, (m a, m a) -> m a, (m a, m (a -> b)) -> m b)\n  //           -> Concurrently m\n  return function concurrify(Repr, zero, alt, ap){\n\n    var INNERTYPE = getTypeIdentifier(Repr);\n    var OUTERTYPE = generateTypeIdentifier(INNERTYPE);\n    var INNERNAME = type.parse(INNERTYPE).name;\n    var OUTERNAME = type.parse(OUTERTYPE).name;\n\n    function Concurrently(sequential){\n      this.sequential = sequential;\n    }\n\n    function isInner(x){\n      return x instanceof Repr\n      || (Boolean(x) && x.constructor === Repr)\n      || type(x) === Repr[$$type];\n    }\n\n    function isOuter(x){\n      return x instanceof Concurrently\n      || (Boolean(x) && x.constructor === Concurrently)\n      || type(x) === OUTERTYPE;\n    }\n\n    function construct(x){\n      if(!isInner(x)) invalidArgument(OUTERNAME, 0, 'be of type \"' + INNERNAME + '\"', x);\n      return new Concurrently(x);\n    }\n\n    if(!isApplicativeRepr(Repr)) invalidArgument('concurrify', 0, 'represent an Applicative', Repr);\n    if(!isInner(zero)) invalidArgument('concurrify', 1, 'be of type \"' + INNERNAME + '\"', zero);\n    if(!isFunction(alt)) invalidArgument('concurrify', 2, 'be a function', alt);\n    if(!isBinary(alt)) invalidArgument('concurrify', 2, 'be binary', alt);\n    if(!isFunction(ap)) invalidArgument('concurrify', 3, 'be a function', ap);\n    if(!isBinary(ap)) invalidArgument('concurrify', 3, 'be binary', ap);\n\n    var proto = Concurrently.prototype = construct.prototype = {constructor: construct};\n\n    construct[$$type] = OUTERTYPE;\n\n    var mzero = new Concurrently(zero);\n\n    construct[$zero] = function Concurrently$zero(){\n      return mzero;\n    };\n\n    construct[$of] = function Concurrently$of(value){\n      return new Concurrently(Z.of(Repr, value));\n    };\n\n    proto[$map] = function Concurrently$map(mapper){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#map', this, OUTERNAME);\n      if(!isFunction(mapper)) invalidArgument(OUTERNAME + '#map', 0, 'be a function', mapper);\n      return new Concurrently(Z.map(mapper, this.sequential));\n    };\n\n    proto[$ap] = function Concurrently$ap(m){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#ap', this, OUTERNAME);\n      if(!isOuter(m)) invalidArgument(OUTERNAME + '#ap', 0, 'be a ' + OUTERNAME, m);\n      return new Concurrently(ap(this.sequential, m.sequential));\n    };\n\n    proto[$alt] = function Concurrently$alt(m){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#alt', this, OUTERNAME);\n      if(!isOuter(m)) invalidArgument(OUTERNAME + '#alt', 0, 'be a ' + OUTERNAME, m);\n      return new Concurrently(alt(this.sequential, m.sequential));\n    };\n\n    proto.toString = function Concurrently$toString(){\n      if(!isOuter(this)) invalidContext(OUTERNAME + '#toString', this, OUTERNAME);\n      return OUTERNAME + '(' + Z.toString(this.sequential) + ')';\n    };\n\n    return construct;\n\n  };\n\n}));\n","export interface Maybe <A>{\r\n    value0?:A; \r\n}\r\n\r\n\r\nexport const maybe = <A>(nothingFn: () => any) => (justFn:(value:A) => any) => (m:Maybe<A>):any => \r\n    m.value0 === undefined\r\n        ?   nothingFn()\r\n        :   justFn(m.value0);\r\n\r\n\r\nexport const getMaybeValue = maybe (() => undefined) (value => value);\r\n","import {State, Tick} from \"types/State\";\r\nimport {maybe} from \"utils/Utils\";\r\n\r\nconst div = document.getElementById(\"app\");\r\n\r\n\r\nexport const render = (state:State) => \r\n    div.innerHTML = \r\n        maybe<Tick>\r\n            (() => `Start time: ${state.startTime}`)\r\n            (tick => \r\n                `<div>\r\n                    <div>${tick.elapsedTime} seconds passed</div>\r\n                    <div>Delta Time (ms): ${tick.deltaTime}</div>\r\n                </div>`)\r\n            (state.tick);\r\n\r\n\r\n"],"sourceRoot":""}